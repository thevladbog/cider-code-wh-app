name: Release Pipeline

on:
  push:
    branches:
      - 'release-stable'
      - 'release-beta'
  # –£–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ –æ—Ç—Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ci-cd.yml

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–∫–æ–º–º–∏—Ç—ã –∏ –ø—É—à–∏)
    outputs:
      new_version: ${{ steps.version-fix.outputs.version }}
      release_type: ${{ steps.branch-check.outputs.release_type }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine release type
        id: branch-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/release-stable" ]]; then
            echo "release_type=stable" >> $GITHUB_OUTPUT
          else
            echo "release_type=beta" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate semantic version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        with:
          branch: ${{ github.ref }}
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}${{ steps.branch-check.outputs.release_type == 'beta' && '-beta.${increment}' || '' }}"
          bump_each_commit: true
          
      - name: Fix beta version format
        id: version-fix
        run: |
          RAW_VERSION="${{ steps.semver.outputs.version }}"
          if [[ "$RAW_VERSION" == *"-beta.0" ]]; then
            # –ó–∞–º–µ–Ω—è–µ–º .0 –Ω–∞ .1 –¥–ª—è –ø–µ—Ä–≤–æ–π –±–µ—Ç–∞ –≤–µ—Ä—Å–∏–∏
            FIXED_VERSION="${RAW_VERSION%-beta.0}-beta.1"
          elif [[ "$RAW_VERSION" == *"-beta."* ]]; then
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –±–µ—Ç–∞ –≤–µ—Ä—Å–∏–∏ –Ω–∞ 1
            BETA_NUM=$(echo "$RAW_VERSION" | sed 's/.*-beta\.//')
            NEW_BETA_NUM=$((BETA_NUM + 1))
            FIXED_VERSION="${RAW_VERSION%-beta.*}-beta.${NEW_BETA_NUM}"
          else
            FIXED_VERSION="$RAW_VERSION"
          fi
          echo "version=$FIXED_VERSION" >> $GITHUB_OUTPUT
          echo "üîß Fixed version: $RAW_VERSION ‚Üí $FIXED_VERSION"
          
      - name: Update package.json version
        run: |
          echo "üîÑ Updating package.json version to ${{ steps.version-fix.outputs.version }}"
          node scripts/update-package-version.cjs ${{ steps.version-fix.outputs.version }}
          
      - name: Commit updated package.json
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          if git diff --staged --quiet; then
            echo "üìù No changes to package.json version"
          else
            git commit -m "chore: update version to ${{ steps.version-fix.outputs.version }} [skip ci]"
            git push
            echo "‚úÖ package.json version updated and pushed"
          fi
          
      - name: Verify notification script exists
        run: |
          if [ ! -f "scripts/notify-telegram.cjs" ]; then
            echo "ERROR: scripts/notify-telegram.cjs not found!"
            ls -la scripts/
            exit 1
          fi
          chmod +x scripts/notify-telegram.cjs
          echo "‚úÖ Notification script found and made executable"
          
      - name: Send build started notification
        run: node scripts/notify-telegram.cjs start
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          VERSION: ${{ steps.version-fix.outputs.version }}
          RELEASE_TYPE: ${{ steps.branch-check.outputs.release_type }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}

  build:
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Set build platform name
        id: platform
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "name=Windows" >> $GITHUB_OUTPUT
          elif [ "${{ runner.os }}" == "Linux" ]; then
            echo "name=Linux" >> $GITHUB_OUTPUT
          else
            echo "name=macOS" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxtst-dev libpng++-dev
          
      - name: Install dependencies
        run: npm i
        
      - name: Generate development certificates for beta
        if: needs.version.outputs.release_type == 'beta'
        run: |
          echo "Generating development certificates for beta build..."
          node scripts/generate-dev-certs.cjs
        env:
          DOMAIN_NAME: localhost
      
      - name: Install certificate dependencies for production
        if: needs.version.outputs.release_type == 'stable' && runner.os == 'Linux'
        run: |
          echo "üì¶ Installing certbot and dependencies..."
          sudo apt-get update
          sudo apt-get install -y certbot python3-certbot-dns-cloudflare openssl
      
      - name: Validate CI environment for certificate generation
        if: needs.version.outputs.release_type == 'stable' && runner.os == 'Linux'
        run: |
          echo "üîç Validating CI environment for certificate generation..."
          node scripts/validate-ci-environment.cjs
        env:
          DOMAIN_NAME: ${{ secrets.PRODUCTION_DOMAIN_NAME }}
          ACME_EMAIL: ${{ secrets.ACME_EMAIL }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
      - name: Generate production certificates for stable release
        if: needs.version.outputs.release_type == 'stable' && runner.os == 'Linux'
        run: |
          echo "üîê Generating production TLS certificates..."
          node scripts/generate-production-certs.cjs
        env:
          DOMAIN_NAME: ${{ secrets.PRODUCTION_DOMAIN_NAME }}
          ACME_EMAIL: ${{ secrets.ACME_EMAIL }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
      - name: Verify certificate generation
        if: needs.version.outputs.release_type == 'stable' && runner.os == 'Linux'
        run: |
          echo "üîç Verifying generated certificates..."
          if [ ! -f "certs/cert.pem" ] || [ ! -f "certs/key.pem" ] || [ ! -f "certs/ca.pem" ]; then
            echo "‚ùå Certificate files not found!"
            exit 1
          fi
          
          echo "üìã Certificate information:"
          openssl x509 -in certs/cert.pem -noout -subject -issuer -dates
          
          echo "üîí Certificate files generated:"
          ls -la certs/
          echo "‚úÖ Certificate generation completed successfully"
      
      - name: Install certificate archiving tools
        if: needs.version.outputs.release_type == 'stable' && runner.os == 'Linux'
        run: |
          echo "üì¶ Installing tools for secure certificate archiving..."
          sudo apt-get update
          sudo apt-get install -y p7zip-full zip
      
      - name: Secure certificates with password
        if: needs.version.outputs.release_type == 'stable' && runner.os == 'Linux'
        id: secure-certs
        run: |
          echo "üîí Securing certificates with password protection..."
          node scripts/secure-certificates.cjs
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          VERSION: ${{ needs.version.outputs.new_version }}

      - name: Upload secure certificates
        if: needs.version.outputs.release_type == 'stable' && runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: secure-certificates-${{ needs.version.outputs.new_version }}
          path: |
            secure-certs/*.zip
          retention-days: 7
      
      - name: Note about certificates for other platforms
        if: needs.version.outputs.release_type == 'stable' && runner.os != 'Linux'
        run: |
          echo "üìù Production certificates are generated on Linux runner only"
          echo "üîí Certificates will be available as artifacts for deployment"
          echo "üí° Download certificates artifact and deploy to production server"
      
      - name: Build and make application
        shell: bash
        run: |
          if [ "${{ needs.version.outputs.release_type }}" == "stable" ]; then
            echo "üè≠ Building production release with stable API URL..."
            echo "NODE_ENV=production" >> $GITHUB_ENV
            
            # –Ø–≤–Ω–æ —Å–æ–æ–±—â–∞–µ–º –æ —Ç–æ–º, –∫–∞–∫–æ–π API URL –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
            echo "üì¢ ‚ö†Ô∏è API URL –±—É–¥–µ—Ç: https://api.bottlecode.app ‚ö†Ô∏è üì¢"
            
            if [ "${{ runner.os }}" == "Windows" ]; then
              echo "Setting NODE_ENV=production in Windows environment..."
              $env:NODE_ENV="production" && npm run make
            else
              echo "Setting NODE_ENV=production in Unix environment..."
              NODE_ENV=production npm run make
            fi
          else
            echo "üè≠ Building beta release..."
            echo "NODE_ENV=development" >> $GITHUB_ENV
            
            # –Ø–≤–Ω–æ —Å–æ–æ–±—â–∞–µ–º –æ —Ç–æ–º, –∫–∞–∫–æ–π API URL –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
            echo "üì¢ API URL –±—É–¥–µ—Ç: https://beta.api.bottlecode.app üì¢"
            
            if [ "${{ runner.os }}" == "Windows" ]; then
              echo "Setting NODE_ENV=development in Windows environment..."
              $env:NODE_ENV="development" && npm run make
            else
              echo "Setting NODE_ENV=development in Unix environment..."
              NODE_ENV=development npm run make
            fi
          fi
        
      - name: Upload Windows artifacts
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-${{ needs.version.outputs.new_version }}
          path: |
            out/make/squirrel.windows/x64/*.exe
            out/make/zip/win32/x64/*.zip
          retention-days: 30
            
      - name: Upload Linux artifacts
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-release-${{ needs.version.outputs.new_version }}
          path: |
            out/make/deb/x64/*.deb
            out/make/rpm/x64/*.rpm
            out/make/zip/linux/x64/*.zip
          retention-days: 30
            
      - name: Upload macOS artifacts
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: macos-release-${{ needs.version.outputs.new_version }}
          path: |
            out/make/**/*.dmg
            out/make/**/*.zip
          retention-days: 30
          
      - name: Verify notification script exists
        if: failure()
        run: |
          if [ ! -f "scripts/notify-telegram.cjs" ]; then
            echo "ERROR: scripts/notify-telegram.cjs not found!"
            ls -la scripts/
            exit 1
          fi
          chmod +x scripts/notify-telegram.cjs
          echo "‚úÖ Notification script found and made executable"
          
      - name: Send error notification
        if: failure()
        run: node scripts/notify-telegram.cjs error
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          VERSION: ${{ needs.version.outputs.new_version }}
          RELEASE_TYPE: ${{ needs.version.outputs.release_type }}
          BUILD_PLATFORM: ${{ steps.platform.outputs.name }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          ERROR_MESSAGE: "Build failed on ${{ runner.os }} platform"

  beta-release:
    needs: [version, build]
    runs-on: ubuntu-latest
    if: needs.version.outputs.release_type == 'beta'
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Verify notification script exists
        run: |
          if [ ! -f "scripts/notify-telegram.cjs" ]; then
            echo "ERROR: scripts/notify-telegram.cjs not found!"
            ls -la scripts/
            exit 1
          fi
          chmod +x scripts/notify-telegram.cjs
          echo "‚úÖ Notification script found and made executable"
          
      - name: Send beta success notification
        if: success()
        run: node scripts/notify-telegram.cjs success
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          VERSION: ${{ needs.version.outputs.new_version }}
          RELEASE_TYPE: ${{ needs.version.outputs.release_type }}
          BUILD_PLATFORM: "All Platforms"
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          ARTIFACTS_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  
  release:
    needs: [version, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write # This permission is required to create releases
    if: needs.version.outputs.release_type == 'stable'
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: Release v${{ needs.version.outputs.new_version }}
          draft: false
          prerelease: false
          body: |
            ## Release Notes
            
            ### üöÄ New Version: v${{ needs.version.outputs.new_version }}
            
            ### üì¶ Downloads
            - **Windows**: .exe installer and .zip archive
            - **Linux**: .deb and .rpm packages + .zip archive  
            - **macOS**: .dmg installer and .zip archive
            
            ### üîí Security Note
            This build includes password-protected TLS certificates generated via Let's Encrypt.
            Certificates are archived with encryption, and the password is sent to a secure Telegram channel.
            Contact your system administrator to obtain the password for certificate extraction.
            
            ### üìã Installation Notes
            1. Download the appropriate package for your platform
            2. Download the secure certificates archive if needed
            3. Obtain the password from the administrator (sent via secure Telegram channel)
            4. Extract the certificates using the provided password:
               ```
               # Linux/macOS
               unzip -P "your-password" secure-certificates-v*.zip -d ./certs/
               chmod 600 ./certs/key.pem
               chmod 644 ./certs/cert.pem ./certs/ca.pem
               
               # Windows PowerShell
               Expand-Archive -Path "secure-certificates-v*.zip" -DestinationPath "./certs/" 
               # (will prompt for password)
               ```
            5. Install the application
            6. Deploy extracted certificates to /certs/ directory on production server
            7. Run the application
            
            For certificate setup, see documentation in the repository.
          files: |
            windows-release-${{ needs.version.outputs.new_version }}/**/*
            linux-release-${{ needs.version.outputs.new_version }}/**/*
            macos-release-${{ needs.version.outputs.new_version }}/**/*
            secure-certificates-${{ needs.version.outputs.new_version }}/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Verify notification script exists
        run: |
          if [ ! -f "scripts/notify-telegram.cjs" ]; then
            echo "ERROR: scripts/notify-telegram.cjs not found!"
            ls -la scripts/
            exit 1
          fi
          chmod +x scripts/notify-telegram.cjs
          echo "‚úÖ Notification script found and made executable"
          
      - name: Send success notification for stable release
        if: success()
        run: node scripts/notify-telegram.cjs success
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          VERSION: ${{ needs.version.outputs.new_version }}
          RELEASE_TYPE: ${{ needs.version.outputs.release_type }}
          BUILD_PLATFORM: "All Platforms"
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          ARTIFACTS_URL: "${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.version.outputs.new_version }}"
