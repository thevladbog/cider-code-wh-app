name: Release Pipeline

on:
  push:
    branches:
      - 'release-stable'
      - 'release-beta'
    tags:
      - 'v*'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semver.outputs.version }}
      release_type: ${{ steps.branch-check.outputs.release_type }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine release type
        id: branch-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/release-stable" ]] || [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "release_type=stable" >> $GITHUB_OUTPUT
          else
            echo "release_type=beta" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate semantic version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        with:
          branch: ${{ github.ref }}
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}${{ steps.branch-check.outputs.release_type == 'beta' && '-beta.${increment}' || '' }}"
          bump_each_commit: true

  build:
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxtst-dev libpng++-dev
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate development certificates for beta
        if: needs.version.outputs.release_type == 'beta'
        run: |
          echo "Generating development certificates for beta build..."
          node scripts/generate-dev-certs.cjs        env:
          DOMAIN_NAME: localhost
      
      - name: Note about production certificates
        if: needs.version.outputs.release_type == 'stable'
        run: |
          echo "‚ö†Ô∏è  Production certificates must be provided on the deployment server"
          echo "üîí Certificates are not stored in Git repository for security"
          echo "üí° Ensure certificates are available in /certs/ directory on production server"
          echo "üìã Use scripts/generate-letsencrypt-http.cjs on production server for Let's Encrypt"
      
      - name: Build and make application
        run: npm run make
        
      - name: Upload Windows artifacts
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-${{ needs.version.outputs.new_version }}
          path: |
            out/make/squirrel.windows/x64/*.exe
            out/make/zip/win32/x64/*.zip
          retention-days: 30
            
      - name: Upload Linux artifacts
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-release-${{ needs.version.outputs.new_version }}
          path: |
            out/make/deb/x64/*.deb
            out/make/rpm/x64/*.rpm
            out/make/zip/linux/x64/*.zip
          retention-days: 30
            
      - name: Upload macOS artifacts
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: macos-release-${{ needs.version.outputs.new_version }}
          path: |
            out/make/dmg/x64/*.dmg
            out/make/zip/darwin/x64/*.zip
          retention-days: 30

  release:
    needs: [version, build]
    runs-on: ubuntu-latest
    if: needs.version.outputs.release_type == 'stable'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: Release v${{ needs.version.outputs.new_version }}
          draft: false
          prerelease: false
          body: |
            ## Release Notes
            
            ### üöÄ New Version: v${{ needs.version.outputs.new_version }}
            
            ### üì¶ Downloads
            - **Windows**: .exe installer and .zip archive
            - **Linux**: .deb and .rpm packages + .zip archive  
            - **macOS**: .dmg installer and .zip archive
            
            ### üîí Security Note
            This build requires TLS certificates to be configured on the deployment server.
            Certificates are not included in the release for security reasons.
            
            ### üìã Installation Notes
            1. Download the appropriate package for your platform
            2. Install the application
            3. Configure TLS certificates using the provided scripts
            4. Run the application
            
            For certificate setup, see documentation in the repository.
          files: |
            windows-release-${{ needs.version.outputs.new_version }}/**/*
            linux-release-${{ needs.version.outputs.new_version }}/**/*
            macos-release-${{ needs.version.outputs.new_version }}/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}