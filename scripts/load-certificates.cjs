#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const KEYVAULT_NAME = process.env.KEYVAULT_NAME;
const AWS_REGION = process.env.AWS_REGION;
const LOCAL_CERT_PATH = process.env.LOCAL_CERT_PATH; // –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
const SECRET_PROVIDER = process.env.SECRET_PROVIDER || 'none'; // 'azure', 'aws', 'vault', 'local', 'letsencrypt', 'none'

console.log('üîê Loading TLS certificates from secure storage...');
console.log(`üì¶ Provider: ${SECRET_PROVIDER}`);

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
const certsDir = path.join(process.cwd(), 'certs');
if (!fs.existsSync(certsDir)) {
  fs.mkdirSync(certsDir, { recursive: true });
}

async function loadFromAzureKeyVault() {
  if (!KEYVAULT_NAME) {
    throw new Error('KEYVAULT_NAME environment variable is required for Azure Key Vault');
  }

  console.log('‚òÅÔ∏è Loading certificates from Azure Key Vault...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–∑ Azure Key Vault
    const cert = execSync(`az keyvault secret show --vault-name "${KEYVAULT_NAME}" --name "tls-cert" --query "value" -o tsv`).toString().trim();
    const key = execSync(`az keyvault secret show --vault-name "${KEYVAULT_NAME}" --name "tls-key" --query "value" -o tsv`).toString().trim();
    const ca = execSync(`az keyvault secret show --vault-name "${KEYVAULT_NAME}" --name "tls-ca" --query "value" -o tsv`).toString().trim();
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã
    fs.writeFileSync(path.join(certsDir, 'cert.pem'), cert);
    fs.writeFileSync(path.join(certsDir, 'key.pem'), key);
    fs.writeFileSync(path.join(certsDir, 'ca.pem'), ca);
    
    console.log('‚úÖ Certificates loaded from Azure Key Vault');
  } catch (error) {
    console.error('‚ùå Failed to load from Azure Key Vault:', error.message);
    throw error;
  }
}

async function loadFromAWSSecretsManager() {
  if (!AWS_REGION) {
    throw new Error('AWS_REGION environment variable is required for AWS Secrets Manager');
  }

  console.log('‚òÅÔ∏è Loading certificates from AWS Secrets Manager...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–∑ AWS Secrets Manager
    const cert = execSync(`aws secretsmanager get-secret-value --secret-id "prod/tls/cert" --region "${AWS_REGION}" --query "SecretString" --output text`).toString().trim();
    const key = execSync(`aws secretsmanager get-secret-value --secret-id "prod/tls/key" --region "${AWS_REGION}" --query "SecretString" --output text`).toString().trim();
    const ca = execSync(`aws secretsmanager get-secret-value --secret-id "prod/tls/ca" --region "${AWS_REGION}" --query "SecretString" --output text`).toString().trim();
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã
    fs.writeFileSync(path.join(certsDir, 'cert.pem'), cert);
    fs.writeFileSync(path.join(certsDir, 'key.pem'), key);
    fs.writeFileSync(path.join(certsDir, 'ca.pem'), ca);
    
    console.log('‚úÖ Certificates loaded from AWS Secrets Manager');
  } catch (error) {
    console.error('‚ùå Failed to load from AWS Secrets Manager:', error.message);
    throw error;
  }
}

async function loadFromHashiCorpVault() {
  const VAULT_ADDR = process.env.VAULT_ADDR;
  const VAULT_TOKEN = process.env.VAULT_TOKEN;
  
  if (!VAULT_ADDR || !VAULT_TOKEN) {
    throw new Error('VAULT_ADDR and VAULT_TOKEN environment variables are required for HashiCorp Vault');
  }

  console.log('üèõÔ∏è Loading certificates from HashiCorp Vault...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–∑ HashiCorp Vault
    const cert = execSync(`vault kv get -field=cert secret/tls`).toString().trim();
    const key = execSync(`vault kv get -field=key secret/tls`).toString().trim();
    const ca = execSync(`vault kv get -field=ca secret/tls`).toString().trim();
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã
    fs.writeFileSync(path.join(certsDir, 'cert.pem'), cert);
    fs.writeFileSync(path.join(certsDir, 'key.pem'), key);
    fs.writeFileSync(path.join(certsDir, 'ca.pem'), ca);
    
    console.log('‚úÖ Certificates loaded from HashiCorp Vault');
  } catch (error) {
    console.error('‚ùå Failed to load from HashiCorp Vault:', error.message);
    throw error;
  }
}

async function loadFromLocalPath() {
  if (!LOCAL_CERT_PATH) {
    throw new Error('LOCAL_CERT_PATH environment variable is required for local certificate loading');
  }

  console.log('üìÅ Loading certificates from local path...');
  console.log(`üìÇ Source: ${LOCAL_CERT_PATH}`);

  try {
    const sourceCert = path.join(LOCAL_CERT_PATH, 'cert.pem');
    const sourceKey = path.join(LOCAL_CERT_PATH, 'key.pem');
    const sourceCa = path.join(LOCAL_CERT_PATH, 'ca.pem');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if (!fs.existsSync(sourceCert)) {
      throw new Error(`Certificate file not found: ${sourceCert}`);
    }
    if (!fs.existsSync(sourceKey)) {
      throw new Error(`Key file not found: ${sourceKey}`);
    }

    // –ö–æ–ø–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    fs.copyFileSync(sourceCert, path.join(certsDir, 'cert.pem'));
    fs.copyFileSync(sourceKey, path.join(certsDir, 'key.pem'));
    
    // CA —Ñ–∞–π–ª –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    if (fs.existsSync(sourceCa)) {
      fs.copyFileSync(sourceCa, path.join(certsDir, 'ca.pem'));
    }

    console.log('‚úÖ Certificates loaded from local path');
  } catch (error) {
    console.error('‚ùå Failed to load from local path:', error.message);
    throw error;
  }
}

async function generateLetsEncryptCertificates() {
  console.log('üîó Generating Let\'s Encrypt certificates...');
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Å–∫—Ä–∏–ø—Ç –¥–ª—è Let's Encrypt
    execSync('node scripts/generate-letsencrypt-http.cjs', { stdio: 'inherit' });
    console.log('‚úÖ Let\'s Encrypt certificates generated');
  } catch (error) {
    console.error('‚ùå Failed to generate Let\'s Encrypt certificates:', error.message);
    throw error;
  }
}

async function generateFallbackCertificates() {
  console.log('‚ö†Ô∏è  No secure storage configured, generating fallback certificates...');
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ development —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    execSync('node scripts/generate-dev-certs.cjs', { stdio: 'inherit' });
    console.log('‚úÖ Fallback certificates generated');
  } catch (error) {
    console.error('‚ùå Failed to generate fallback certificates:', error.message);
    throw error;
  }
}

async function main() {
  try {
    switch (SECRET_PROVIDER) {
      case 'azure':
        await loadFromAzureKeyVault();
        break;
      case 'aws':
        await loadFromAWSSecretsManager();
        break;
      case 'vault':
        await loadFromHashiCorpVault();
        break;
      case 'local':
        await loadFromLocalPath();
        break;
      case 'letsencrypt':
        await generateLetsEncryptCertificates();
        break;
      default:
        await generateFallbackCertificates();
        break;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    const certFile = path.join(certsDir, 'cert.pem');
    const keyFile = path.join(certsDir, 'key.pem');
    
    if (fs.existsSync(certFile) && fs.existsSync(keyFile)) {
      console.log('üìã Certificate information:');
      const opensslOutput = execSync(`openssl x509 -in ${certFile} -noout -dates -subject -issuer`).toString();
      console.log(opensslOutput);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º)
      if (process.platform !== 'win32') {
        execSync(`chmod 644 ${certFile}`);
        execSync(`chmod 600 ${keyFile}`);
        if (fs.existsSync(path.join(certsDir, 'ca.pem'))) {
          execSync(`chmod 644 ${path.join(certsDir, 'ca.pem')}`);
        }
      }
      
      console.log('üéâ TLS certificates ready for build!');
    } else {
      throw new Error('Certificate files were not created successfully');
    }
    
  } catch (error) {
    console.error('‚ùå Failed to load certificates:', error.message);
    process.exit(1);
  }
}

main();
