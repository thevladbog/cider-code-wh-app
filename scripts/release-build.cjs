#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–∞
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
 * 1. –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 2. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –ø–∞–ø–∫—É updates
 * 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö latest.json
 * 4. –°–æ–∑–¥–∞–Ω–∏–µ GitHub Release template
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/release-build.cjs [version]
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 * node scripts/release-build.cjs           # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ package.json
 * node scripts/release-build.cjs 1.0.3     # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const PROJECT_ROOT = path.join(__dirname, '..');
const PACKAGE_JSON_PATH = path.join(PROJECT_ROOT, 'package.json');
const UPDATES_DIR = path.join(PROJECT_ROOT, 'updates');
const OUT_DIR = path.join(PROJECT_ROOT, 'out', 'make');

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å emoji
 */
function log(emoji, message) {
  console.log(`${emoji} ${message}`);
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
function execCommand(command, description) {
  log('‚ö°', `${description}...`);
  try {
    const result = execSync(command, { 
      cwd: PROJECT_ROOT, 
      stdio: 'inherit',
      encoding: 'utf8'
    });
    log('‚úÖ', `${description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    return result;
  } catch (error) {
    log('‚ùå', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${description}`);
    console.error(error.message);
    process.exit(1);
  }
}

/**
 * –ß–∏—Ç–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ package.json
 */
function getCurrentVersion() {
  const packageData = JSON.parse(fs.readFileSync(PACKAGE_JSON_PATH, 'utf8'));
  return packageData.version;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ package.json
 */
function updateVersion(newVersion) {
  const packageData = JSON.parse(fs.readFileSync(PACKAGE_JSON_PATH, 'utf8'));
  packageData.version = newVersion;
  fs.writeFileSync(PACKAGE_JSON_PATH, JSON.stringify(packageData, null, 2));
  log('üìù', `–í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${newVersion}`);
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏
 */
function findBuildArtifacts(version) {
  const artifacts = {};
  
  // Windows Squirrel
  const windowsDir = path.join(OUT_DIR, 'squirrel.windows', 'x64');
  const windowsSetup = path.join(windowsDir, `bottle-code-wh-app-${version}-setup.exe`);
  const windowsNupkg = path.join(windowsDir, `bottle_code_wh_app-${version}-full.nupkg`);
  
  if (fs.existsSync(windowsSetup)) {
    artifacts.windows = {
      setup: windowsSetup,
      nupkg: windowsNupkg,
      releases: path.join(windowsDir, 'RELEASES')
    };
  }

  // ZIP —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const zipDir = path.join(OUT_DIR, 'zip');
  if (fs.existsSync(zipDir)) {
    const zipFiles = fs.readdirSync(zipDir).filter(f => f.endsWith('.zip'));
    if (zipFiles.length > 0) {
      artifacts.zip = zipFiles.map(f => path.join(zipDir, f));
    }
  }

  return artifacts;
}

/**
 * –ö–æ–ø–∏—Ä—É–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ –ø–∞–ø–∫—É updates
 */
function copyArtifactsToUpdates(artifacts, version) {
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É updates –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync(UPDATES_DIR)) {
    fs.mkdirSync(UPDATES_DIR, { recursive: true });
  }

  const copiedFiles = [];

  // –ö–æ–ø–∏—Ä—É–µ–º Windows setup
  if (artifacts.windows && artifacts.windows.setup) {
    const destPath = path.join(UPDATES_DIR, `bottle-code-wh-app-${version}-setup.exe`);
    fs.copyFileSync(artifacts.windows.setup, destPath);
    copiedFiles.push(destPath);
    log('üìÅ', `–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${path.basename(destPath)}`);
  }

  // –ö–æ–ø–∏—Ä—É–µ–º ZIP —Ñ–∞–π–ª—ã
  if (artifacts.zip) {
    artifacts.zip.forEach(zipFile => {
      const destPath = path.join(UPDATES_DIR, path.basename(zipFile));
      fs.copyFileSync(zipFile, destPath);
      copiedFiles.push(destPath);
      log('üìÅ', `–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${path.basename(destPath)}`);
    });
  }

  return copiedFiles;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç GitHub Release template
 */
function createGitHubReleaseTemplate(version, artifacts) {
  const template = {
    tag_name: `v${version}`,
    name: `Release v${version}`,
    body: `## –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤–µ—Ä—Å–∏–∏ ${version}

### üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

### üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
- –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫

### üîß –£–ª—É—á—à–µ–Ω–∏—è
- –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π

### üì¶ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏
${artifacts.windows ? `- üñ•Ô∏è Windows: \`bottle-code-wh-app-${version}-setup.exe\`` : ''}
${artifacts.zip ? `- üì¶ ZIP –∞—Ä—Ö–∏–≤—ã: \`${artifacts.zip.length} —Ñ–∞–π–ª–æ–≤\`` : ''}

### üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ.`,
    draft: true,
    prerelease: version.includes('beta') || version.includes('alpha'),
    assets: []
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  if (artifacts.windows) {
    template.assets.push({
      name: `bottle-code-wh-app-${version}-setup.exe`,
      path: artifacts.windows.setup,
      content_type: 'application/octet-stream'
    });
  }

  if (artifacts.zip) {
    artifacts.zip.forEach(zipFile => {
      template.assets.push({
        name: path.basename(zipFile),
        path: zipFile,
        content_type: 'application/zip'
      });
    });
  }

  const templatePath = path.join(UPDATES_DIR, `github-release-v${version}.json`);
  fs.writeFileSync(templatePath, JSON.stringify(template, null, 2));
  log('üìã', `GitHub Release template —Å–æ–∑–¥–∞–Ω: ${templatePath}`);
  
  return templatePath;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  const args = process.argv.slice(2);
  let targetVersion = args[0];
  
  log('üöÄ', '–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏ —Ä–µ–ª–∏–∑–∞');
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é
  const currentVersion = getCurrentVersion();
  if (!targetVersion) {
    targetVersion = currentVersion;
    log('‚ÑπÔ∏è', `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${targetVersion}`);
  } else if (targetVersion !== currentVersion) {
    log('‚ÑπÔ∏è', `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —Å ${currentVersion} –Ω–∞ ${targetVersion}`);
    updateVersion(targetVersion);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  execCommand('node scripts/check-env.cjs', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è');

  // –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  execCommand('npm run build', '–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');

  // –ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
  log('üîç', '–ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å–±–æ—Ä–∫–∏...');
  const artifacts = findBuildArtifacts(targetVersion);
  
  if (Object.keys(artifacts).length === 0) {
    log('‚ùå', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å–±–æ—Ä–∫–∏');
    process.exit(1);
  }

  log('üì¶', '–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:');
  if (artifacts.windows) {
    log('   ', `üñ•Ô∏è Windows: ${path.basename(artifacts.windows.setup)}`);
  }
  if (artifacts.zip) {
    log('   ', `üì¶ ZIP: ${artifacts.zip.length} —Ñ–∞–π–ª–æ–≤`);
  }

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
  log('üìÅ', '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –ø–∞–ø–∫—É updates...');
  const copiedFiles = copyArtifactsToUpdates(artifacts, targetVersion);
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  execCommand('node scripts/update-latest-json.cjs', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö latest.json');

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è latest.yml –¥–ª—è electron-updater
  execCommand('node scripts/generate-latest-yml.cjs', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è latest.yml –¥–ª—è electron-updater');

  // –°–æ–∑–¥–∞–Ω–∏–µ GitHub Release template
  const templatePath = createGitHubReleaseTemplate(targetVersion, artifacts);

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('‚úÖ', '–†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω!');
  log('üìä', '–°–≤–æ–¥–∫–∞:');
  log('   ', `üì¶ –í–µ—Ä—Å–∏—è: ${targetVersion}`);
  log('   ', `üìÅ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: ${copiedFiles.length} —Ñ–∞–π–ª–æ–≤`);
  log('   ', `üìã Template: ${path.basename(templatePath)}`);
  log('   ', `üåê Updates: ${UPDATES_DIR}`);
  
  log('üîÑ', '–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  log('   ', '1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: npm run update-server');
  log('   ', '2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: npm start');
  log('   ', '3. –°–æ–∑–¥–∞–π—Ç–µ GitHub Release –∏—Å–ø–æ–ª—å–∑—É—è template');
  log('   ', '4. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Ä–µ–ª–∏–∑ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = {
  main,
  getCurrentVersion,
  updateVersion,
  findBuildArtifacts,
  copyArtifactsToUpdates,
  createGitHubReleaseTemplate
};
