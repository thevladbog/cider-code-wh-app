#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ 
 * –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å –ø–∞—Ä–æ–ª–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å –≤ Telegram
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const crypto = require('crypto');
const https = require('https');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const VERSION = process.env.VERSION || '1.0.0';

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const certsDir = path.join(process.cwd(), 'certs');
const archiveDir = path.join(process.cwd(), 'secure-certs');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
function checkCertificates() {
  console.log('üîç Checking for certificates...');
  
  if (!fs.existsSync(certsDir)) {
    throw new Error(`Certificates directory ${certsDir} not found!`);
  }
  
  const certFiles = ['cert.pem', 'key.pem', 'ca.pem'];
  const missingFiles = certFiles.filter(file => !fs.existsSync(path.join(certsDir, file)));
  
  if (missingFiles.length > 0) {
    throw new Error(`Missing certificate files: ${missingFiles.join(', ')}`);
  }
  
  console.log('‚úÖ All certificate files found');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
function generatePassword(length = 16) {
  // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–æ–ª—å, –≤–∫–ª—é—á–∞—é—â–∏–π –±—É–∫–≤—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏ –Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=';
  let password = '';
  
  const randomValues = crypto.randomBytes(length);
  for (let i = 0; i < length; i++) {
    password += chars[randomValues[i] % chars.length];
  }
  
  console.log(`üîë Random password generated (${length} characters)`);
  return password;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
function createTestCertificates() {
  console.log('üîß Creating test certificates...');
  
  if (!fs.existsSync(certsDir)) {
    fs.mkdirSync(certsDir, { recursive: true });
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  fs.writeFileSync(path.join(certsDir, 'cert.pem'), 'TEST CERTIFICATE - FOR DEMONSTRATION ONLY');
  fs.writeFileSync(path.join(certsDir, 'key.pem'), 'TEST PRIVATE KEY - FOR DEMONSTRATION ONLY');
  fs.writeFileSync(path.join(certsDir, 'ca.pem'), 'TEST CA CERTIFICATE - FOR DEMONSTRATION ONLY');
  
  console.log('‚úÖ Test certificates created successfully');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
function createSecureArchive(password) {
  console.log('üì¶ Creating secure archive...');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(archiveDir)) {
    fs.mkdirSync(archiveDir, { recursive: true });
  }
  
  const archiveName = `secure-certificates-v${VERSION}.zip`;
  const archivePath = path.join(archiveDir, archiveName);
  
  try {
    // –î–ª—è 7-Zip (–Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥)
    if (process.platform === 'win32') {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 7-Zip
        execSync('where 7z', { stdio: 'ignore' });
        
        console.log('üì¶ Using 7-Zip for secure archive...');
        execSync(`7z a -p"${password}" -mhe=on "${archivePath}" "${certsDir}\\cert.pem" "${certsDir}\\key.pem" "${certsDir}\\ca.pem"`, { stdio: 'inherit' });
        return archivePath;
      } catch (e) {
        console.log('‚ö†Ô∏è 7-Zip not found on Windows, using PowerShell ZIP (without encryption)');
        
        // –°–æ–∑–¥–∞–µ–º README —Å –ø–∞—Ä–æ–ª–µ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const readmePath = path.join(certsDir, 'README-SECURE.txt');
        fs.writeFileSync(readmePath, 
          `SECURE CERTIFICATES\n\n` +
          `Password: ${password}\n\n` +
          `‚ö†Ô∏è IMPORTANT: This file contains the password for the certificates.\n` +
          `Delete it after use and store the password securely.\n` +
          `Version: ${VERSION}\n` +
          `Generated: ${new Date().toISOString()}\n`
        );
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ZIP
        const psCommand = `Compress-Archive -Path "${certsDir}\\*.pem","${readmePath}" -DestinationPath "${archivePath}" -Force`;
        execSync(`powershell -Command "${psCommand}"`, { stdio: 'inherit' });
        
        // –£–¥–∞–ª—è–µ–º README –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
        fs.unlinkSync(readmePath);
        
        return archivePath;
      }
    } else {
      // Linux/macOS
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 7-Zip
        execSync('which 7z', { stdio: 'ignore' });
        
        console.log('üì¶ Using 7-Zip for secure archive...');
        execSync(`7z a -p"${password}" -mhe=on "${archivePath}" "${certsDir}/cert.pem" "${certsDir}/key.pem" "${certsDir}/ca.pem"`, { stdio: 'inherit' });
        return archivePath;
      } catch (e) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ zip
          execSync('which zip', { stdio: 'ignore' });
          
          console.log('üì¶ Using zip for secure archive...');
          execSync(`zip --password "${password}" -j "${archivePath}" "${certsDir}/cert.pem" "${certsDir}/key.pem" "${certsDir}/ca.pem"`, { stdio: 'inherit' });
          return archivePath;
        } catch (e2) {
          // –ï—Å–ª–∏ –Ω–∏ zip –Ω–∏ 7z –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã
          console.log('‚ö†Ô∏è Neither 7-Zip nor zip found, trying to install zip...');
          
          try {
            if (process.platform === 'darwin') {
              execSync('brew install zip', { stdio: 'inherit' });
            } else {
              execSync('sudo apt-get update && sudo apt-get install -y zip', { stdio: 'inherit' });
            }
            
            console.log('üì¶ Using zip for secure archive...');
            execSync(`zip --password "${password}" -j "${archivePath}" "${certsDir}/cert.pem" "${certsDir}/key.pem" "${certsDir}/ca.pem"`, { stdio: 'inherit' });
            return archivePath;
          } catch (e3) {
            console.log('‚ö†Ô∏è Failed to install or use zip, creating unsecured archive with password in file');
            
            // –°–æ–∑–¥–∞–µ–º README —Å –ø–∞—Ä–æ–ª–µ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            const readmePath = path.join(certsDir, 'README-SECURE.txt');
            fs.writeFileSync(readmePath, 
              `SECURE CERTIFICATES\n\n` +
              `Password: ${password}\n\n` +
              `‚ö†Ô∏è IMPORTANT: This file contains the password for the certificates.\n` +
              `Delete it after use and store the password securely.\n` +
              `Version: ${VERSION}\n` +
              `Generated: ${new Date().toISOString()}\n`
            );
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º tar
            execSync(`tar -czvf "${archivePath}" -C "${certsDir}" cert.pem key.pem ca.pem README-SECURE.txt`, { stdio: 'inherit' });
            
            // –£–¥–∞–ª—è–µ–º README –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
            fs.unlinkSync(readmePath);
            
            return archivePath;
          }
        }
      }
    }
  } catch (error) {
    console.error('‚ùå Failed to create secure archive:', error.message);
    throw error;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è –≤ Telegram
function sendPasswordToTelegram(password) {
  console.log('üì± Sending password to Telegram...');
  
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    throw new Error('TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID environment variables are required');
  }
  
  const message = `üîê *–ü–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ v${VERSION}*\n\n\`${password}\`\n\n‚ö†Ô∏è –≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ.`;
  const encodedMessage = encodeURIComponent(message);
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&parse_mode=Markdown&text=${encodedMessage}`;
  
  return new Promise((resolve, reject) => {
    const req = https.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode === 200) {
          console.log('‚úÖ Password sent to Telegram successfully');
          resolve();
        } else {
          reject(new Error(`Failed to send message to Telegram: HTTP ${res.statusCode} - ${data}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(new Error(`Failed to send message to Telegram: ${error.message}`));
    });
    
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üîí Starting certificate protection process...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const isTestMode = process.argv.includes('-test') || process.argv.includes('--test');
    
    if (isTestMode) {
      console.log('üß™ Running in TEST mode');
      createTestCertificates();
    } else {
      // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
      checkCertificates();
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
    const password = generatePassword();
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
    const archivePath = createSecureArchive(password);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ Telegram, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if (!isTestMode && TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
      try {
        await sendPasswordToTelegram(password);
      } catch (telegramError) {
        console.error('‚ö†Ô∏è Failed to send password to Telegram:', telegramError.message);
        console.warn(`‚ö†Ô∏è Generated password: ${password}`);
      }
    } else {
      console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID not provided, or running in test mode.');
      console.warn(`‚ö†Ô∏è Generated password: ${password}`);
    }
    
    console.log('üéâ Certificate protection completed successfully!');
    console.log(`üì¶ Archive path: ${archivePath}`);
    console.log(`üîë Password: ${isTestMode ? password : '******'}`);
    
    // –í—ã–≤–æ–¥ –ø–∞—Ä–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è CI
    if (process.env.CI === 'true') {
      console.log(`::set-output name=archive_password::${password}`);
      console.log(`::set-output name=archive_path::${archivePath}`);
    }
  } catch (error) {
    console.error('‚ùå Certificate protection failed:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();
