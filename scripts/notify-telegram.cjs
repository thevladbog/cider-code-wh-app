#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–ª–∏–∑–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ, –æ—à–∏–±–∫–∞—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–∏–ª–¥–∞
 */

const https = require('https');

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const VERSION = process.env.VERSION || '0.0.0';
const GITHUB_REPOSITORY = process.env.GITHUB_REPOSITORY || 'unknown-repo';
const GITHUB_SERVER_URL = process.env.GITHUB_SERVER_URL || 'https://github.com';
const GITHUB_RUN_ID = process.env.GITHUB_RUN_ID;
const GITHUB_RUN_NUMBER = process.env.GITHUB_RUN_NUMBER;
const BUILD_PLATFORM = process.env.BUILD_PLATFORM || 'unknown';
const RELEASE_TYPE = process.env.RELEASE_TYPE || 'unknown';
const ERROR_MESSAGE = process.env.ERROR_MESSAGE;
const ARTIFACTS_URL = process.env.ARTIFACTS_URL;

// –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const NOTIFICATION_TYPE = process.argv[2] || 'start';

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param {string} message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Markdown)
 * @returns {Promise<void>}
 */
function sendTelegramMessage(message) {
  console.log('üì± Sending notification to Telegram...');
  
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    throw new Error('TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID environment variables are required');
  }
  
  const encodedMessage = encodeURIComponent(message);
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&parse_mode=Markdown&text=${encodedMessage}`;
  
  return new Promise((resolve, reject) => {
    const req = https.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode === 200) {
          console.log('‚úÖ Notification sent to Telegram successfully');
          resolve();
        } else {
          reject(new Error(`Failed to send message to Telegram: HTTP ${res.statusCode} - ${data}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(new Error(`Failed to send message to Telegram: ${error.message}`));
    });
    
    req.end();
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–∞ GitHub Actions
 * @returns {string} URL –Ω–∞ —Ä–∞–Ω GitHub Actions
 */
function getRunUrl() {
  if (!GITHUB_RUN_ID || !GITHUB_REPOSITORY) {
    return '';
  }
  
  return `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–ª–∏–∑–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
 * @returns {string} –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function createStartMessage() {
  const emoji = RELEASE_TYPE === 'beta' ? 'üß™' : 'üöÄ';
  const type = RELEASE_TYPE === 'beta' ? '–±–µ—Ç–∞' : '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π';
  const runUrl = getRunUrl();
  const runLink = runUrl ? `\n\nüîó [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å](${runUrl})` : '';
  
  return `${emoji} *–ù–∞—á–∞—Ç ${type} —Ä–µ–ª–∏–∑ v${VERSION}*\n\n` +
         `üìã –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${BUILD_PLATFORM}\n` +
         `üî¢ –°–±–æ—Ä–∫–∞: #${GITHUB_RUN_NUMBER}${runLink}`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–ª–∏–∑–∞
 * @returns {string} –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function createErrorMessage() {
  const runUrl = getRunUrl();
  const runLink = runUrl ? `\n\nüîó [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏](${runUrl})` : '';
  const errorDetails = ERROR_MESSAGE ? `\n\n‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n\`\`\`\n${ERROR_MESSAGE}\n\`\`\`` : '';
  
  return `‚ùå *–û—à–∏–±–∫–∞ —Ä–µ–ª–∏–∑–∞ v${VERSION}*\n\n` +
         `üìã –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${BUILD_PLATFORM}\n` +
         `üî¢ –°–±–æ—Ä–∫–∞: #${GITHUB_RUN_NUMBER}${errorDetails}${runLink}`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–ª–∏–∑–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
 * @returns {string} –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function createSuccessMessage() {
  const emoji = RELEASE_TYPE === 'beta' ? 'üß™' : '‚úÖ';
  const type = RELEASE_TYPE === 'beta' ? '–±–µ—Ç–∞' : '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π';
  const runUrl = getRunUrl();
  const runLink = runUrl ? `\n\nüîó [–ü—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∫–∏](${runUrl})` : '';
  
  let artifactsSection = '';
  if (ARTIFACTS_URL) {
    artifactsSection = `\n\nüì¶ *–°—Å—ã–ª–∫–∏ –Ω–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:*\n${ARTIFACTS_URL}`;
  }
  
  return `${emoji} *–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω ${type} —Ä–µ–ª–∏–∑ v${VERSION}*\n\n` +
         `üìã –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${BUILD_PLATFORM}\n` +
         `üî¢ –°–±–æ—Ä–∫–∞: #${GITHUB_RUN_NUMBER}${artifactsSection}${runLink}`;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  try {
    console.log(`üîî Preparing ${NOTIFICATION_TYPE} notification for Telegram...`);
    
    let message = '';
    
    switch (NOTIFICATION_TYPE) {
      case 'start':
        message = createStartMessage();
        break;
      case 'error':
        message = createErrorMessage();
        break;
      case 'success':
        message = createSuccessMessage();
        break;
      default:
        throw new Error(`Unknown notification type: ${NOTIFICATION_TYPE}`);
    }
    
    await sendTelegramMessage(message);
    console.log('‚úÖ Telegram notification completed');
  } catch (error) {
    console.error('‚ùå Failed to send Telegram notification:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main();
