#!/usr/bin/env node

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä latest.yml —Ñ–∞–π–ª–∞ –¥–ª—è electron-updater –∏ GitHub Releases
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª latest.yml, –∫–æ—Ç–æ—Ä—ã–π electron-updater –æ–∂–∏–¥–∞–µ—Ç –Ω–∞–π—Ç–∏
 * –≤ GitHub Releases –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. GitHub Releases –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª
 * –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω—É–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/generate-latest-yml.cjs [version]
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 * node scripts/generate-latest-yml.cjs           # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ package.json
 * node scripts/generate-latest-yml.cjs 1.0.3     # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const providedVersion = args[0];

// –ß–∏—Ç–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ package.json –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
function getVersion() {
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: CLI –∞—Ä–≥—É–º–µ–Ω—Ç > –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è > package.json
  if (providedVersion) {
    return providedVersion;
  }
  
  if (process.env.APP_VERSION) {
    return process.env.APP_VERSION;
  }
  
  try {
    const packagePath = path.join(__dirname, '../package.json');
    const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    return packageData.version;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ package.json:', error.message);
    return '1.0.0';
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
function getRepoInfo() {
  try {
    const packagePath = path.join(__dirname, '../package.json');
    const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–∑ package.json
    if (packageData.repository && packageData.repository.url) {
      const repoUrl = packageData.repository.url;
      const match = repoUrl.match(/github\.com[:/]([^/]+)\/(.+?)(?:\.git)?$/);
      if (match) {
        return {
          owner: match[1],
          repo: match[2]
        };
      }
    }
    
    // Fallback –∑–Ω–∞—á–µ–Ω–∏—è
    return {
      owner: 'thevladbog',
      repo: 'cider-code-wh-app'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:', error.message);
    return {
      owner: 'thevladbog',
      repo: 'cider-code-wh-app'
    };
  }
}

// –í—ã—á–∏—Å–ª—è–µ—Ç SHA512 —Ö—ç—à —Ñ–∞–π–ª–∞
function calculateSHA512(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${filePath}`);
      return null;
    }
    
    const fileBuffer = fs.readFileSync(filePath);
    const hashSum = crypto.createHash('sha512');
    hashSum.update(fileBuffer);
    return hashSum.digest('base64');
  } catch (error) {
    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö—ç—à–∞ –¥–ª—è ${filePath}:`, error.message);
    return null;
  }
}

// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
function getFileSize(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return 0;
    }
    const stats = fs.statSync(filePath);
    return stats.size;
  } catch (error) {
    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return 0;
  }
}

// –ù–∞—Ö–æ–¥–∏—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏
function findBuildArtifacts(version) {
  const artifactsBase = path.join(__dirname, '../out/make');
  const artifacts = {};
  
  // Windows artifacts (Squirrel)
  const windowsPath = path.join(artifactsBase, 'squirrel.windows/x64');
  if (fs.existsSync(windowsPath)) {
    const files = fs.readdirSync(windowsPath);
    
    // –ò—â–µ–º setup.exe —Ñ–∞–π–ª
    const setupFile = files.find(file => file.endsWith('-setup.exe'));
    if (setupFile) {
      artifacts.setupExe = {
        name: setupFile,
        path: path.join(windowsPath, setupFile)
      };
    }
    
    // –ò—â–µ–º .nupkg —Ñ–∞–π–ª
    const nupkgFile = files.find(file => file.endsWith('.nupkg'));
    if (nupkgFile) {
      artifacts.nupkg = {
        name: nupkgFile,
        path: path.join(windowsPath, nupkgFile)
      };
    }
    
    // –ò—â–µ–º RELEASES —Ñ–∞–π–ª
    const releasesFile = path.join(windowsPath, 'RELEASES');
    if (fs.existsSync(releasesFile)) {
      artifacts.releases = {
        name: 'RELEASES',
        path: releasesFile
      };
    }
  }
  
  return artifacts;
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ latest.yml
function generateLatestYml(version, repoInfo, artifacts) {
  const isPrerelease = version.includes('beta') || version.includes('alpha') || version.includes('rc');
  const releaseDate = new Date().toISOString();
  
  // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è GitHub Releases
  const baseUrl = `https://github.com/${repoInfo.owner}/${repoInfo.repo}/releases/download/v${version}`;
  
  const latestYml = {
    version: version,
    releaseDate: releaseDate,
    githubArtifactName: null,
    path: null,
    sha512: null,
    size: null
  };
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å setup.exe —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
  if (artifacts.setupExe) {
    const setupPath = artifacts.setupExe.path;
    const setupName = artifacts.setupExe.name;
    
    latestYml.path = setupName;
    latestYml.sha512 = calculateSHA512(setupPath);
    latestYml.size = getFileSize(setupPath);
    
    console.log(`üì¶ –û—Å–Ω–æ–≤–Ω–æ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: ${setupName}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä: ${latestYml.size} –±–∞–π—Ç`);
    console.log(`üîí SHA512: ${latestYml.sha512 ? '–≤—ã—á–∏—Å–ª–µ–Ω' : '–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å'}`);
  } else {
    console.warn('‚ö†Ô∏è Setup.exe —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö —Å–±–æ—Ä–∫–∏');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .nupkg –∫–∞–∫ fallback
    if (artifacts.nupkg) {
      const nupkgPath = artifacts.nupkg.path;
      const nupkgName = artifacts.nupkg.name;
      
      latestYml.path = nupkgName;
      latestYml.sha512 = calculateSHA512(nupkgPath);
      latestYml.size = getFileSize(nupkgPath);
      
      console.log(`üì¶ Fallback –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: ${nupkgName}`);
    } else {
      console.warn('‚ö†Ô∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω latest.yml');
      
      // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤
      latestYml.path = `bottle-code-wh-app-${version}-setup.exe`;
      latestYml.sha512 = '';
      latestYml.size = 0;
    }
  }
  
  return latestYml;
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ YAML —Ñ–æ—Ä–º–∞—Ç
function objectToYaml(obj, indent = 0) {
  const indentStr = ' '.repeat(indent);
  let yaml = '';
  
  for (const [key, value] of Object.entries(obj)) {
    if (value === null) {
      yaml += `${indentStr}${key}: null\n`;
    } else if (typeof value === 'string') {
      yaml += `${indentStr}${key}: ${value}\n`;
    } else if (typeof value === 'number') {
      yaml += `${indentStr}${key}: ${value}\n`;
    } else if (typeof value === 'object') {
      yaml += `${indentStr}${key}:\n`;
      yaml += objectToYaml(value, indent + 2);
    }
  }
  
  return yaml;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
function generateLatestYmlFile() {
  const version = getVersion();
  const repoInfo = getRepoInfo();
  
  console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è latest.yml –¥–ª—è electron-updater...');
  console.log(`üì¶ –í–µ—Ä—Å–∏—è: ${version}`);
  console.log(`üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repoInfo.owner}/${repoInfo.repo}`);
  
  // –ò—â–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏
  const artifacts = findBuildArtifacts(version);
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${Object.keys(artifacts).length}`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º latest.yml
  const latestYmlData = generateLatestYml(version, repoInfo, artifacts);
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ YAML
  const yamlContent = objectToYaml(latestYmlData);
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  const outputDir = path.join(__dirname, '../updates');
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
  const outputPath = path.join(outputDir, 'latest.yml');
  fs.writeFileSync(outputPath, yamlContent);
  
  console.log('‚úÖ latest.yml —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
  console.log(`üìÅ –ü—É—Ç—å: ${outputPath}`);
  
  // –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log('\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ latest.yml:');
  console.log('‚îÄ'.repeat(50));
  console.log(yamlContent);
  console.log('‚îÄ'.repeat(50));
  
  // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è GitHub Actions
  const githubOutputPath = path.join(outputDir, `latest-v${version}.yml`);
  fs.writeFileSync(githubOutputPath, yamlContent);
  console.log(`üìÑ –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è: ${githubOutputPath}`);
  
  return {
    outputPath,
    githubOutputPath,
    data: latestYmlData
  };
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  try {
    generateLatestYmlFile();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ latest.yml:', error.message);
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
  generateLatestYmlFile,
  getVersion,
  getRepoInfo,
  findBuildArtifacts,
  generateLatestYml
};
