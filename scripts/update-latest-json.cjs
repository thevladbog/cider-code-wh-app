#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è latest.json —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤,
 * –≤–∫–ª—é—á–∞—é—â–∏–º–∏ –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/update-latest-json.cjs [version] [base-url]
 */

const fs = require('fs');
const path = require('path');

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const providedVersion = args[0];
const baseUrl = args[1] || 'http://localhost:3001/updates';

// –ß–∏—Ç–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ package.json, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
const getVersionFromPackage = () => {
  try {
    const packagePath = path.join(__dirname, '../package.json');
    const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    return packageData.version;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ package.json:', error);
    return '1.0.0';
  }
};

const version = providedVersion || getVersionFromPackage();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
const getFileSize = (filePath) => {
  try {
    const stats = fs.statSync(filePath);
    return stats.size;
  } catch (error) {
    console.warn(`–§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0`);
    return 0;
  }
};

// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç latest.json
const createLatestJson = () => {
  const currentDate = new Date().toISOString();
  
  // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å –≤–µ—Ä—Å–∏—è–º–∏
  const updatesDir = path.join(__dirname, '../updates');
  const winFile = path.join(updatesDir, `bottle-code-wh-app-${version}-setup.exe`);
  const macFile = path.join(updatesDir, `bottle-code-wh-app-${version}.dmg`);
  const linuxFile = path.join(updatesDir, `bottle-code-wh-app-${version}.AppImage`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –∫ —Ä–µ–ª–∏–∑—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä—Å–∏–∏
  const generateReleaseNotes = (ver) => {
    const parts = ver.split('.');
    const major = parseInt(parts[0]);
    const minor = parseInt(parts[1]);
    const patch = parseInt(parts[2]);
    
    let notes = `## –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤–µ—Ä—Å–∏–∏ ${ver}\\n`;
    
    if (ver.includes('beta')) {
      notes += '- –ë–µ—Ç–∞-–≤–µ—Ä—Å–∏—è —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏\\n';
      notes += '- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏\\n';
    } else if (patch > 0) {
      notes += '- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫\\n';
      notes += '- –£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\\n';
      notes += '- –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\\n';
    } else if (minor > 0) {
      notes += '- –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\\n';
      notes += '- –£–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\\n';
      notes += '- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫\\n';
    } else {
      notes += '- –ö—Ä—É–ø–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏\\n';
      notes += '- –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\\n';
      notes += '- –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\\n';
    }
    
    return notes;
  };
  
  const latestData = {
    version: version,
    notes: generateReleaseNotes(version),
    releaseDate: currentDate,
    platforms: {
      win32: {
        url: `${baseUrl}/bottle-code-wh-app-${version}-setup.exe`,
        signature: '', // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤
        size: getFileSize(winFile)
      },
      darwin: {
        url: `${baseUrl}/bottle-code-wh-app-${version}.dmg`,
        signature: '',
        size: getFileSize(macFile)
      },
      linux: {
        url: `${baseUrl}/bottle-code-wh-app-${version}.AppImage`,
        signature: '',
        size: getFileSize(linuxFile)
      }
    }
  };
  
  return latestData;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è latest.json
const updateLatestJson = () => {
  const latestData = createLatestJson();
  const outputPath = path.join(__dirname, '../updates/latest.json');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é updates, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const updatesDir = path.dirname(outputPath);
    if (!fs.existsSync(updatesDir)) {
      fs.mkdirSync(updatesDir, { recursive: true });
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(outputPath, JSON.stringify(latestData, null, 2));
    
    console.log('‚úÖ latest.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    console.log(`üì¶ –í–µ—Ä—Å–∏—è: ${version}`);
    console.log(`üìÅ –§–∞–π–ª: ${outputPath}`);
    console.log('üìã –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:');
    console.log(`   Windows: bottle-code-wh-app-${version}-setup.exe`);
    console.log(`   macOS:   bottle-code-wh-app-${version}.dmg`);
    console.log(`   Linux:   bottle-code-wh-app-${version}.AppImage`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ latest.json:', error);
    process.exit(1);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –¥–ª—è GitHub Releases
const createGitHubReleaseTemplate = () => {
  const latestData = createLatestJson();
  
  const template = {
    tag_name: `v${version}`,
    target_commitish: 'main',
    name: `Release v${version}`,
    body: latestData.notes.replace(/\\n/g, '\n'),
    draft: true,
    prerelease: version.includes('beta') || version.includes('alpha'),
    generate_release_notes: false
  };
  
  const templatePath = path.join(__dirname, '../updates/github-release-template.json');
  fs.writeFileSync(templatePath, JSON.stringify(template, null, 2));
  
  console.log('üìù –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –¥–ª—è GitHub Release:', templatePath);
};

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  console.log('üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ latest.json...');
  updateLatestJson();
  createGitHubReleaseTemplate();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
  createLatestJson,
  updateLatestJson,
  createGitHubReleaseTemplate
};
