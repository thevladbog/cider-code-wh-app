#!/usr/bin/env node

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–π
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ git —Ç–µ–≥–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
 */

const fs = require('fs');
const { execSync } = require('child_process');

/**
 * –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
 * @param {string} baseVersion - –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.0.3")
 * @param {string} type - –¢–∏–ø –≤–µ—Ä—Å–∏–∏ ("beta" –∏–ª–∏ "stable")
 * @returns {number[]} - –ú–∞—Å—Å–∏–≤ –Ω–æ–º–µ—Ä–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–µ—Ä—Å–∏–π
 */
function getExistingVersionNumbers(baseVersion, type) {
  try {
    let pattern;
    if (type === 'beta') {
      pattern = `v${baseVersion}-beta.*`;
    } else {
      pattern = `v${baseVersion}`;
    }
    
    const existingTags = execSync(`git tag -l "${pattern}"`).toString().trim();
    
    if (!existingTags) {
      return [];
    }
    
    const tags = existingTags.split('\n').filter(tag => tag.trim());
    
    if (type === 'beta') {
      return tags.map(tag => {
        const match = tag.match(/v\d+\.\d+\.\d+-beta\.(\d+)/);
        return match ? parseInt(match[1]) : 0;
      }).filter(num => num > 0);
    } else {
      // –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
      return tags.length > 0 ? [1] : [];
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å git —Ç–µ–≥–∏: ${error.message}`);
    console.log('üîÑ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏
 * @param {string} baseVersion - –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
 * @returns {number} - –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏
 */
function getNextBetaNumber(baseVersion) {
  const existingNumbers = getExistingVersionNumbers(baseVersion, 'beta');
  
  if (existingNumbers.length === 0) {
    return 1; // –ü–µ—Ä–≤–∞—è –±–µ—Ç–∞ –≤–µ—Ä—Å–∏—è
  }
  
  return Math.max(...existingNumbers) + 1;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±–µ—Ç–∞-–≤–µ—Ä—Å–∏—é
 * @param {string} major - Major –≤–µ—Ä—Å–∏—è
 * @param {string} minor - Minor –≤–µ—Ä—Å–∏—è  
 * @param {string} patch - Patch –≤–µ—Ä—Å–∏—è
 * @returns {string} - –ü–æ–ª–Ω–∞—è –±–µ—Ç–∞-–≤–µ—Ä—Å–∏—è
 */
function generateBetaVersion(major, minor, patch) {
  const baseVersion = `${major}.${minor}.${patch}`;
  const betaNumber = getNextBetaNumber(baseVersion);
  
  return `${baseVersion}-beta.${betaNumber}`;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * @param {string} version - –í–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 */
function stableVersionExists(version) {
  const existing = getExistingVersionNumbers(version, 'stable');
  return existing.length > 0;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏
 * @param {string} releaseType - –¢–∏–ø —Ä–µ–ª–∏–∑–∞ ('stable' –∏–ª–∏ 'beta')
 * @param {string} bumpType - –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ('major', 'minor', 'patch')
 * @returns {string|null} - –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
function generateNextVersion(releaseType = 'stable', bumpType = 'patch') {
  try {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ package.json
    const packageJsonPath = './package.json';
    if (!fs.existsSync(packageJsonPath)) {
      console.error('‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
      return null;
    }
    
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const currentVersion = packageJson.version;
    
    console.log(`üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${currentVersion}`);
    
    // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    const [major, minor, patch] = currentVersion.split(/[.-]/).map(Number);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    let newMajor = major;
    let newMinor = minor; 
    let newPatch = patch;
    
    if (bumpType === 'major') {
      newMajor++;
      newMinor = 0;
      newPatch = 0;
    } else if (bumpType === 'minor') {
      newMinor++;
      newPatch = 0;
    } else {
      newPatch++;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞
    let newVersion;
    if (releaseType === 'beta') {
      newVersion = generateBetaVersion(newMajor, newMinor, newPatch);
    } else {
      newVersion = `${newMajor}.${newMinor}.${newPatch}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
      if (stableVersionExists(newVersion)) {
        console.log(`‚ö†Ô∏è –í–µ—Ä—Å–∏—è ${newVersion} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch`);
        newPatch++;
        newVersion = `${newMajor}.${newMinor}.${newPatch}`;
      }
    }
    
    console.log(`‚ú® –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${newVersion}`);
    return newVersion;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏: ${error.message}`);
    return null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = {
  generateNextVersion,
  generateBetaVersion,
  getNextBetaNumber,
  getExistingVersionNumbers,
  stableVersionExists
};

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const args = process.argv.slice(2);
  const releaseType = args[0] || 'stable';
  const bumpType = args[1] || 'patch';
  
  console.log('üîß === –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–µ—Ä—Å–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–π ===');
  console.log(`üéØ –¢–∏–ø —Ä–µ–ª–∏–∑–∞: ${releaseType}`);
  console.log(`üìà –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${bumpType}`);
  console.log('');
  
  const newVersion = generateNextVersion(releaseType, bumpType);
  
  if (newVersion) {
    console.log('');
    console.log('üìã –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
    console.log(`   npm run version:update ${newVersion}`);
    console.log('');
    console.log('üìÇ –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ git —Ç–µ–≥:');
    console.log(`   git tag v${newVersion}`);
    console.log(`   git push origin v${newVersion}`);
  } else {
    process.exit(1);
  }
}
