#!/usr/bin/env node

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É GitHub Actions workflow –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function getCurrentVersion() {
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    return packageJson.version;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`, colors.red);
    return null;
  }
}

function generateSemanticVersion(releaseType = 'stable') {
  // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è semantic-version action
  const currentVersion = getCurrentVersion();
  if (!currentVersion) return null;
  
  const [major, minor, patch] = currentVersion.split(/[.-]/).map(Number);
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch –≤–µ—Ä—Å–∏—é
  const newPatch = patch + 1;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
  let newVersion = `${major}.${minor}.${newPatch}`;
  
  if (releaseType === 'beta') {
    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    newVersion += `-beta.${timestamp}`;
  }
  
  return newVersion;
}

function main() {
  const args = process.argv.slice(2);
  const releaseType = args[0] || 'stable'; // stable –∏–ª–∏ beta
  
  log('üéØ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ ===', colors.bright);
  log('');
  
  // –®–∞–≥ 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
  const currentVersion = getCurrentVersion();
  if (!currentVersion) {
    process.exit(1);
  }
  
  log(`üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${currentVersion}`, colors.cyan);
  log(`üéØ –¢–∏–ø —Ä–µ–ª–∏–∑–∞: ${releaseType}`, colors.cyan);
  log('');
  
  // –®–∞–≥ 2: –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é semantic version
  log('‚öôÔ∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é...', colors.yellow);
  const newVersion = generateSemanticVersion(releaseType);
  
  if (!newVersion) {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é', colors.red);
    process.exit(1);
  }
  
  log(`‚ú® –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${newVersion}`, colors.green);
  log('');
  
  // –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º package.json
  log('üìù –û–±–Ω–æ–≤–ª—è–µ–º package.json...', colors.yellow);
  try {
    execSync(`node scripts/update-package-version.cjs ${newVersion}`, { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è package.json: ${error.message}`, colors.red);
    process.exit(1);
  }
  
  log('');
  
  // –®–∞–≥ 4: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const updatedVersion = getCurrentVersion();
  log(`üéâ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ package.json: ${updatedVersion}`, colors.green);
  
  // –®–∞–≥ 5: –°–∏–º—É–ª–∏—Ä—É–µ–º git –∫–æ–º–º–∏—Ç (—Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã)
  log('');
  log('üìÇ Git –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', colors.magenta);
  log(`   git add package.json`, colors.cyan);
  log(`   git commit -m "chore: update version to ${newVersion} [skip ci]"`, colors.cyan);
  log(`   git push`, colors.cyan);
  log('');
  
  // –®–∞–≥ 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö
  log('üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –≤ CI/CD:', colors.magenta);
  log('   1. Build –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º', colors.cyan);
  log('   2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –≤ GitHub', colors.cyan);
  log('   3. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤', colors.cyan);
  log('   4. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram', colors.cyan);
  log('');
  
  log('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', colors.green);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
if (!fs.existsSync('package.json')) {
  log('‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è package.json)', colors.red);
  process.exit(1);
}

if (require.main === module) {
  main();
}
