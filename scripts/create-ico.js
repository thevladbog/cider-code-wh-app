#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ICO —Ñ–∞–π–ª–∞ –∏–∑ PNG —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ico-endec
 */

const fs = require('fs');
const path = require('path');

async function createIcoFile() {
  try {
    const { encode } = require('ico-endec');
    const sharp = require('sharp');
    
    const assetsDir = path.join(__dirname, '..', 'src', 'assets');
    const iconPath = path.join(assetsDir, 'icon.png');
    const icoPath = path.join(assetsDir, 'icon.ico');
    
    if (!fs.existsSync(iconPath)) {
      console.error('‚ùå –§–∞–π–ª icon.png –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ src/assets/');
      process.exit(1);
    }
    
    console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ ICO —Ñ–∞–π–ª–∞ –∏–∑ PNG...');
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    const sizes = [16, 24, 32, 48, 64, 128, 256];
    const images = [];
    
    for (const size of sizes) {
      console.log(`üìè –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ ${size}x${size}...`);
      const buffer = await sharp(iconPath)
        .resize(size, size)
        .png()
        .toBuffer();
      
      images.push(buffer);
    }
    
    // –°–æ–∑–¥–∞–µ–º ICO —Ñ–∞–π–ª
    console.log('üî® –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ ICO —Ñ–∞–π–ª–∞...');
    const icoBuffer = encode(images);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ICO —Ñ–∞–π–ª
    fs.writeFileSync(icoPath, icoBuffer);
    
    console.log('‚úÖ ICO —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', icoPath);
    console.log('üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', Math.round(icoBuffer.length / 1024), 'KB');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ICO —Ñ–∞–π–ª–∞:', error.message);
    process.exit(1);
  }
}

createIcoFile();
