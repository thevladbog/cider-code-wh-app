#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Let's Encrypt –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const DOMAIN_NAME = process.env.DOMAIN_NAME;
const ACME_EMAIL = process.env.ACME_EMAIL;
const CLOUDFLARE_API_TOKEN = process.env.CLOUDFLARE_API_TOKEN;

if (!DOMAIN_NAME || !ACME_EMAIL) {
  console.error('‚ùå Missing required environment variables: DOMAIN_NAME, ACME_EMAIL');
  process.exit(1);
}

console.log('üîê Generating production TLS certificates...');
console.log(`üìß Email: ${ACME_EMAIL}`);
console.log(`üåê Domain: ${DOMAIN_NAME}`);

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
const certsDir = path.join(process.cwd(), 'certs');
if (!fs.existsSync(certsDir)) {
  fs.mkdirSync(certsDir, { recursive: true });
}

try {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º certbot –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  console.log('üì¶ Installing certbot...');
  execSync('sudo apt-get update && sudo apt-get install -y certbot python3-certbot-dns-cloudflare', { stdio: 'inherit' });

  // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å Cloudflare API —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º DNS challenge
  if (CLOUDFLARE_API_TOKEN) {
    console.log('‚òÅÔ∏è Using Cloudflare DNS challenge...');
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è Cloudflare
    const cloudflareCredentials = `dns_cloudflare_api_token = ${CLOUDFLARE_API_TOKEN}`;
    fs.writeFileSync('/tmp/cloudflare.ini', cloudflareCredentials);
    execSync('chmod 600 /tmp/cloudflare.ini');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —á–µ—Ä–µ–∑ DNS challenge
    execSync(`sudo certbot certonly \\
      --dns-cloudflare \\
      --dns-cloudflare-credentials /tmp/cloudflare.ini \\
      --email ${ACME_EMAIL} \\
      --agree-tos \\
      --non-interactive \\
      -d ${DOMAIN_NAME}`, { stdio: 'inherit' });
  } else {
    console.log('üîó Using HTTP challenge...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP challenge (—Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –¥–æ–º–µ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω)
    execSync(`sudo certbot certonly \\
      --standalone \\
      --email ${ACME_EMAIL} \\
      --agree-tos \\
      --non-interactive \\
      -d ${DOMAIN_NAME}`, { stdio: 'inherit' });
  }

  // –ö–æ–ø–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –Ω–∞—à—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  const letsEncryptDir = `/etc/letsencrypt/live/${DOMAIN_NAME}`;
  
  console.log('üìã Copying certificates...');
  execSync(`sudo cp ${letsEncryptDir}/fullchain.pem ${certsDir}/cert.pem`);
  execSync(`sudo cp ${letsEncryptDir}/privkey.pem ${certsDir}/key.pem`);
  execSync(`sudo cp ${letsEncryptDir}/chain.pem ${certsDir}/ca.pem`);
  
  // –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  execSync(`sudo chown $(whoami):$(whoami) ${certsDir}/*.pem`);
  execSync(`chmod 644 ${certsDir}/cert.pem ${certsDir}/ca.pem`);
  execSync(`chmod 600 ${certsDir}/key.pem`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  console.log('‚úÖ Verifying certificate...');
  const opensslOutput = execSync(`openssl x509 -in ${certsDir}/cert.pem -noout -dates -subject -issuer`).toString();
  console.log(opensslOutput);

  console.log('üéâ Production certificates generated successfully!');
  
} catch (error) {
  console.error('‚ùå Error generating production certificates:', error.message);
  
  // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Å–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∫–∞–∫ fallback
  console.log('üîÑ Falling back to self-signed certificates...');
  generateSelfSignedCertificates(DOMAIN_NAME, certsDir);
}

function generateSelfSignedCertificates(domain, certsDir) {
  try {
    console.log(`üîê Generating self-signed certificate for ${domain}...`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    execSync(`openssl genrsa -out ${certsDir}/key.pem 2048`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    const opensslConfig = `
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
C = RU
ST = Moscow
L = Moscow
O = Bottle Code WH
OU = IT Department
CN = ${domain}

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = ${domain}
DNS.2 = *.${domain}
DNS.3 = localhost
IP.1 = 127.0.0.1
`;
    
    fs.writeFileSync(`${certsDir}/openssl.conf`, opensslConfig);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    execSync(`openssl req -new -x509 -key ${certsDir}/key.pem -out ${certsDir}/cert.pem -days 365 -config ${certsDir}/openssl.conf -extensions v3_req`);
      // –°–æ–∑–¥–∞–µ–º CA —Ñ–∞–π–ª (–∫–æ–ø–∏—è cert –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö)
    if (process.platform === 'win32') {
      execSync(`copy "${certsDir}\\cert.pem" "${certsDir}\\ca.pem"`, { shell: true });
    } else {
      execSync(`cp ${certsDir}/cert.pem ${certsDir}/ca.pem`);
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    fs.unlinkSync(`${certsDir}/openssl.conf`);
    
    console.log('‚úÖ Self-signed certificate generated as fallback');
    
  } catch (fallbackError) {
    console.error('‚ùå Failed to generate even self-signed certificates:', fallbackError.message);
    process.exit(1);
  }
}
