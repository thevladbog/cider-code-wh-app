#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Forge –¥–ª—è macOS DMG
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ (—Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ forge.config.ts)
function getAppVersion() {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è CI/CD)
  if (process.env.APP_VERSION) {
    return process.env.APP_VERSION;
  }
  
  // –ò–Ω–∞—á–µ —á–∏—Ç–∞–µ–º –∏–∑ package.json
  try {
    const packagePath = path.join(__dirname, '..', 'package.json');
    const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    return packageData.version;
  } catch (error) {
    console.warn('Warning: Could not read package.json, using default version');
    return '1.0.0';
  }
}

// –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const appVersion = getAppVersion();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ DMG
const dmgName = `bottle-c-wh-${appVersion}`;
const maxLength = 27;

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ macOS DMG');
console.log('=====================================');
console.log(`üì¶ –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${appVersion}`);
console.log(`üìÅ –ò–º—è DMG: "${dmgName}"`);
console.log(`üìè –î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏: ${dmgName.length} —Å–∏–º–≤–æ–ª–æ–≤`);
console.log(`üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${maxLength} —Å–∏–º–≤–æ–ª–æ–≤`);

if (dmgName.length <= maxLength) {
  console.log('‚úÖ –ò–º—è DMG —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º macOS');
  console.log(`üöÄ –ó–∞–ø–∞—Å: ${maxLength - dmgName.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  process.exit(0);
} else {
  console.log('‚ùå –ò–º—è DMG –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç macOS');
  console.log(`üö® –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: ${dmgName.length - maxLength} —Å–∏–º–≤–æ–ª–æ–≤`);
  console.log('üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∏–º—è –≤ forge.config.ts');
  process.exit(1);
}
