#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GitHub —Ä–µ–ª–∏–∑–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/create-github-release.cjs [version]
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const PACKAGE_JSON_PATH = path.join(__dirname, '..', 'package.json');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(emoji, message, color = colors.reset) {
  console.log(`${color}${emoji} ${message}${colors.reset}`);
}

function error(message) {
  log('‚ùå', message, colors.red);
  process.exit(1);
}

function success(message) {
  log('‚úÖ', message, colors.green);
}

function info(message) {
  log('‚ÑπÔ∏è', message, colors.blue);
}

function warning(message) {
  log('‚ö†Ô∏è', message, colors.yellow);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
 */
function checkGitRepository() {
  try {
    execSync('git rev-parse --git-dir', { stdio: 'ignore' });
    return true;
  } catch {
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ package.json
 */
function getCurrentVersion() {
  const packageData = JSON.parse(fs.readFileSync(PACKAGE_JSON_PATH, 'utf8'));
  return packageData.version;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ package.json
 */
function updateVersion(newVersion) {
  const packageData = JSON.parse(fs.readFileSync(PACKAGE_JSON_PATH, 'utf8'));
  packageData.version = newVersion;
  fs.writeFileSync(PACKAGE_JSON_PATH, JSON.stringify(packageData, null, 2));
  success(`–í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${newVersion}`);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è
 */
function checkWorkingDirectory() {
  try {
    const status = execSync('git status --porcelain', { encoding: 'utf8' });
    return status.trim() === '';
  } catch {
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç git —Ç–µ–≥ –∏ –ø—É—à–∏—Ç –µ–≥–æ
 */
function createAndPushTag(version) {
  const tagName = `v${version}`;
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π
    execSync('git add package.json', { stdio: 'inherit' });
    execSync(`git commit -m "chore: bump version to ${version}"`, { stdio: 'inherit' });
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
    execSync(`git tag -a ${tagName} -m "Release ${version}"`, { stdio: 'inherit' });
    
    // –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Ç–µ–≥
    execSync('git push origin main', { stdio: 'inherit' });
    execSync(`git push origin ${tagName}`, { stdio: 'inherit' });
    
    success(`–¢–µ–≥ ${tagName} —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—à–µ–Ω`);
    return tagName;
  } catch (error) {
    error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞: ${error.message}`);
  }
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
function buildApplication() {
  info('–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  try {
    execSync('npm run build', { stdio: 'inherit' });
    success('–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    error(`–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
function checkBuildArtifacts() {
  const artifactsPath = path.join(__dirname, '..', 'out', 'make', 'squirrel.windows', 'x64');
  
  if (!fs.existsSync(artifactsPath)) {
    error('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä–∫—É.');
  }
  
  const files = fs.readdirSync(artifactsPath);
  const setupFile = files.find(file => file.endsWith('-setup.exe'));
  
  if (!setupFile) {
    error('–£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö —Å–±–æ—Ä–∫–∏.');
  }
  
  success(`–ù–∞–π–¥–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª: ${setupFile}`);
  return artifactsPath;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  const args = process.argv.slice(2);
  const newVersion = args[0];
  
  log('üöÄ', '–°–æ–∑–¥–∞–Ω–∏–µ GitHub —Ä–µ–ª–∏–∑–∞...', colors.cyan);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏
  if (!checkGitRepository()) {
    error('–ù–µ –Ω–∞–π–¥–µ–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
  }
  
  if (!checkWorkingDirectory()) {
    error('–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —á–∏—Å—Ç–∞—è. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–ª–∏–∑–∞.');
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é
  const currentVersion = getCurrentVersion();
  const targetVersion = newVersion || currentVersion;
  
  info(`–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${currentVersion}`);
  info(`–¶–µ–ª–µ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${targetVersion}`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (newVersion && newVersion !== currentVersion) {
    updateVersion(newVersion);
  }
  
  // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  buildApplication();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
  const artifactsPath = checkBuildArtifacts();
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥ (—ç—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç GitHub Actions)
  const tagName = createAndPushTag(targetVersion);
  
  success('üéâ –†–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
  info(`GitHub Actions –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç —Ä–µ–ª–∏–∑ –¥–ª—è —Ç–µ–≥–∞ ${tagName}`);
  info('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: https://github.com/thevladbog/cider-code-wh-app/actions');
  info('–†–µ–ª–∏–∑—ã: https://github.com/thevladbog/cider-code-wh-app/releases');
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = {
  getCurrentVersion,
  updateVersion,
  createAndPushTag,
  buildApplication,
  checkBuildArtifacts
};
