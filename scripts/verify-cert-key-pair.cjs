#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –ø–∞—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç/–∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è OpenSSL
function checkOpenSSLInstalled() {
  try {
    const result = execSync('openssl version', { encoding: 'utf-8' });
    console.log(`‚úÖ OpenSSL –¥–æ—Å—Ç—É–ø–µ–Ω: ${result.trim()}`);
    return true;
  } catch (error) {
    console.error('‚ùå OpenSSL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–æ–¥—É–ª—è –∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
function extractModulusFromCert(certPath) {
  try {
    const modulusCmd = `openssl x509 -noout -modulus -in "${certPath}"`;
    const modulus = execSync(modulusCmd, { encoding: 'utf-8' }).trim();
    return modulus;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è –∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–æ–¥—É–ª—è –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
function extractModulusFromKey(keyPath) {
  try {
    const modulusCmd = `openssl rsa -noout -modulus -in "${keyPath}"`;
    const modulus = execSync(modulusCmd, { encoding: 'utf-8' }).trim();
    return modulus;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è –∏–∑ –∫–ª—é—á–∞: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –∫–ª—é—á–∞
function verifyCertKeyPair(certPath, keyPath) {
  if (!fs.existsSync(certPath)) {
    console.error(`‚ùå –§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${certPath}`);
    return false;
  }

  if (!fs.existsSync(keyPath)) {
    console.error(`‚ùå –§–∞–π–ª –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${keyPath}`);
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenSSL
  if (checkOpenSSLInstalled()) {
    const certModulus = extractModulusFromCert(certPath);
    const keyModulus = extractModulusFromKey(keyPath);
    
    if (certModulus && keyModulus) {
      console.log(`üìä –ú–æ–¥—É–ª—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${certModulus}`);
      console.log(`üìä –ú–æ–¥—É–ª—å –∫–ª—é—á–∞: ${keyModulus}`);
      
      if (certModulus === keyModulus) {
        console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É!');
        return true;
      } else {
        console.error('‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É!');
        return false;
      }
    }
  }
  
  // –ï—Å–ª–∏ OpenSSL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
  console.warn('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –∫–ª—é—á–∞');
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
function showCertificateInfo(certPath) {
  if (!fs.existsSync(certPath)) {
    console.error(`‚ùå –§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${certPath}`);
    return;
  }

  try {
    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ:');
    const certInfo = execSync(`openssl x509 -in "${certPath}" -noout -text`, { encoding: 'utf-8' });
    console.log(certInfo);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ: ${error.message}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const args = process.argv.slice(2);
  
  if (args.length < 2) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node verify-cert-key-pair.cjs <–ø—É—Ç—å_–∫_—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É> <–ø—É—Ç—å_–∫_–∫–ª—é—á—É>');
    process.exit(1);
  }
  
  const certPath = args[0];
  const keyPath = args[1];
  
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${certPath}`);
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞: ${keyPath}`);
  
  const isValid = verifyCertKeyPair(certPath, keyPath);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
  if (isValid !== false) {
    showCertificateInfo(certPath);
  }
  
  process.exit(isValid === false ? 1 : 0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();
