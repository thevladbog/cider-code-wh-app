#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const DOMAIN_NAME = process.env.DOMAIN_NAME || 'localhost';

console.log('üîê Generating development TLS certificates...');
console.log(`üåê Domain: ${DOMAIN_NAME}`);

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
const certsDir = path.join(process.cwd(), 'certs');
if (!fs.existsSync(certsDir)) {
  fs.mkdirSync(certsDir, { recursive: true });
}

try {
  console.log(`üîê Generating self-signed certificate for ${DOMAIN_NAME}...`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
  console.log('üîë Generating private key...');
  execSync(`openssl genrsa -out ${certsDir}/key.pem 2048`, { stdio: 'inherit' });
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  const opensslConfig = `
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
C = RU
ST = Moscow
L = Moscow
O = Bottle Code WH Development
OU = IT Department
CN = ${DOMAIN_NAME}

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = ${DOMAIN_NAME}
DNS.2 = *.${DOMAIN_NAME}
DNS.3 = localhost
DNS.4 = *.localhost
IP.1 = 127.0.0.1
IP.2 = ::1
`;
  
  fs.writeFileSync(`${certsDir}/openssl.conf`, opensslConfig);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
  console.log('üìú Generating certificate...');
  execSync(`openssl req -new -x509 -key ${certsDir}/key.pem -out ${certsDir}/cert.pem -days 365 -config ${certsDir}/openssl.conf -extensions v3_req`, { stdio: 'inherit' });
    // –°–æ–∑–¥–∞–µ–º CA —Ñ–∞–π–ª (–∫–æ–ø–∏—è cert –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö)
  console.log('üèõÔ∏è Creating CA certificate...');
  if (process.platform === 'win32') {
    execSync(`copy "${certsDir}\\cert.pem" "${certsDir}\\ca.pem"`, { shell: true });
  } else {
    execSync(`cp ${certsDir}/cert.pem ${certsDir}/ca.pem`);
  }
  
  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
  fs.unlinkSync(`${certsDir}/openssl.conf`);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  if (process.platform !== 'win32') {
    execSync(`chmod 644 ${certsDir}/cert.pem ${certsDir}/ca.pem`);
    execSync(`chmod 600 ${certsDir}/key.pem`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
  console.log('‚úÖ Verifying certificate...');
  const opensslOutput = execSync(`openssl x509 -in ${certsDir}/cert.pem -noout -dates -subject -issuer`).toString();
  console.log(opensslOutput);
  
  console.log('üéâ Development certificates generated successfully!');
  console.log('‚ö†Ô∏è  Note: These are self-signed certificates for development use only');
  
} catch (error) {
  console.error('‚ùå Error generating development certificates:', error.message);
  process.exit(1);
}
