#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ package.json –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ GitHub Actions –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π
 */

const fs = require('fs');
const path = require('path');

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ package.json
 * @param {string} newVersion - –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
 * @returns {boolean} - true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, false –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
 */
function updatePackageVersion(newVersion) {
  try {
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(packageJsonPath)) {
      console.error('‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
      return false;
    }
    
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π package.json
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const oldVersion = packageJson.version;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
    packageJson.version = newVersion;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π package.json —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');
    
    console.log(`‚úÖ –í–µ—Ä—Å–∏—è –≤ package.json –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${oldVersion} ‚Üí ${newVersion}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –≤ package.json:', error.message);
    return false;
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ semver)
 * @param {string} version - –í–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞
 */
function isValidVersion(version) {
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ semver (–≤–∫–ª—é—á–∞—è –±–µ—Ç–∞ –≤–µ—Ä—Å–∏–∏)
  const semverRegex = /^\d+\.\d+\.\d+(-[\w\.-]+)?$/;
  return semverRegex.test(version);
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
function main() {
  const args = process.argv.slice(2);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
  if (args.length === 0) {
    console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node update-package-version.cjs <–Ω–æ–≤–∞—è_–≤–µ—Ä—Å–∏—è>');
    console.log('–ü—Ä–∏–º–µ—Ä: node update-package-version.cjs 1.2.3');
    console.log('–ü—Ä–∏–º–µ—Ä: node update-package-version.cjs 1.2.3-beta.1');
    process.exit(1);
  }
  
  const newVersion = args[0];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏
  if (!isValidVersion(newVersion)) {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏:', newVersion);
    console.log('–í–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É semver (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.2.3 –∏–ª–∏ 1.2.3-beta.1)');
    process.exit(1);
  }
  
  console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ package.json –¥–æ ${newVersion}...`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
  const success = updatePackageVersion(newVersion);
  
  if (!success) {
    process.exit(1);
  }
  
  console.log('üéâ –í–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = {
  updatePackageVersion,
  isValidVersion
};
