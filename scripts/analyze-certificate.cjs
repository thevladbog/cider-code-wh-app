#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
 * –í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const forge = require('node-forge');

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const certPath = process.argv[2];

if (!certPath) {
  console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node analyze-certificate.cjs /path/to/cert.pem');
  process.exit(1);
}

// –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
const fullPath = path.resolve(certPath);

console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${fullPath}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
if (!fs.existsSync(fullPath)) {
  console.error(`‚ùå –§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
  process.exit(1);
}

// –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
try {
  const certData = fs.readFileSync(fullPath, 'utf-8');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç PEM
  if (!certData.includes('-----BEGIN CERTIFICATE-----')) {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PEM: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Ä–∫–µ—Ä BEGIN CERTIFICATE');
    process.exit(1);
  }

  // –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é OpenSSL (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
  try {
    console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è OpenSSL:');
    const openSSLOutput = execSync(`openssl x509 -in "${fullPath}" -noout -text`, { encoding: 'utf-8' });
    console.log(openSSLOutput);
  } catch (e) {
    console.warn('‚ö†Ô∏è OpenSSL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenSSL');
  }
  // –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é node-forge
  try {
    console.log('\nüìã –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é node-forge:');
    
    let certObj;
    try {
      certObj = forge.pki.certificateFromPem(certData);
    } catch (err) {
      if (err.message && (
        err.message.includes('Cannot read public key') || 
        err.message.includes('OID is not RSA') ||
        err.message.includes('Unsupported public key algorithm'))
      ) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∫–ª—é—á–∞:', err.message);
        console.log('\n‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –∫–ª—é—á–∞, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π node-forge (–≤–µ—Ä–æ—è—Ç–Ω–æ ECC/ECDSA). –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω OpenSSL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
        
        // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ OpenSSL
        try {
          const keyType = execSync(`openssl x509 -in "${fullPath}" -noout -pubkey | openssl pkey -pubin -inform PEM -text`, { encoding: 'utf-8' });
          console.log('\nüìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–±–ª–∏—á–Ω–æ–º –∫–ª—é—á–µ (OpenSSL):');
          console.log(keyType);
        } catch (opensslErr) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ OpenSSL:', opensslErr.message);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ OpenSSL
        try {
          const basicInfo = execSync(`openssl x509 -in "${fullPath}" -noout -text`, { encoding: 'utf-8' });
          console.log('\nüìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ (OpenSSL):');
          console.log(basicInfo);
        } catch (basicInfoErr) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ OpenSSL:', basicInfoErr.message);
        }
        
        console.log('\nüö® –í–ê–ñ–ù–û: –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –∫–ª—é—á–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π node-forge, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.');
        console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ:');
        console.log('1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ RSA –≤–º–µ—Å—Ç–æ ECC/ECDSA/DSA');
        console.log('2. –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∏–ø–∞:');
        console.log('   openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out cert.pem');
        console.log('3. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥—Ä—É–≥–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫–ª—é—á–µ–π');
        
        return;
      } else {
        throw err;
      }
    }
    
    // –í—ã–≤–æ–¥ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    console.log('\n‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    
    // –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä
    console.log(`üìå –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ${certObj.serialNumber}`);
    
    // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    const notBefore = new Date(certObj.validity.notBefore);
    const notAfter = new Date(certObj.validity.notAfter);
    console.log(`üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å: ${notBefore.toISOString()}`);
    console.log(`üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${notAfter.toISOString()}`);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É–±—ä–µ–∫—Ç–µ (–¥–µ—Ç–∞–ª—å–Ω–æ)
    console.log('\n‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É–±—ä–µ–∫—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:');
    const subjectAttrs = certObj.subject.attributes;
    if (subjectAttrs.length === 0) {
      console.log('‚ùå –ü–æ–ª—è —Å—É–±—ä–µ–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
    } else {
      subjectAttrs.forEach(attr => {
        console.log(`${attr.name}: ${attr.value}`);
      });
    }

    // –ü–æ–∏—Å–∫ CN –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
    const cn = certObj.subject.getField('CN')?.value;
    const o = certObj.subject.getField('O')?.value;
    
    console.log('\n‚úÖ –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞:');
    console.log(`CN (Common Name): ${cn || '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    console.log(`O (Organization): ${o || '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞
    try {
      const altNamesExt = certObj.getExtension('subjectAltName');
      if (altNamesExt && typeof altNamesExt === 'object' && 'altNames' in altNamesExt) {
        const altNames = altNamesExt.altNames;
        console.log('\n‚úÖ Subject Alternative Names (SAN):');
        altNames.forEach((an, i) => {
          console.log(`SAN #${i+1}: ${an.type === 2 ? 'DNS' : an.type === 7 ? 'IP' : 'Other'}: ${an.value}`);
        });
      } else {
        console.log('\n‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ subjectAltName –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }
    } catch (e) {
      console.warn('\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Subject Alternative Names:', e.message);
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–∑–¥–∞—Ç–µ–ª–µ
    console.log('\n‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–∑–¥–∞—Ç–µ–ª–µ:');
    const issuerAttrs = certObj.issuer.attributes;
    if (issuerAttrs.length === 0) {
      console.log('‚ùå –ü–æ–ª—è –∏–∑–¥–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
    } else {
      issuerAttrs.forEach(attr => {
        console.log(`${attr.name}: ${attr.value}`);
      });
    }
    
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    console.log('\n‚úÖ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:');
    try {
      const extensions = certObj.extensions;
      if (!extensions || extensions.length === 0) {
        console.log('‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
      } else {
        extensions.forEach(ext => {
          console.log(`${ext.name}: ${ext.value ? '–ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        });
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:', e.message);
    }
    
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é node-forge:', e.message);
    console.error(e);
  }
  
  console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ CN (Common Name) —Å –∏–º–µ–Ω–µ–º –¥–æ–º–µ–Ω–∞');
  console.log('2. –ï—Å–ª–∏ CN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ subjectAltName —Å DNS –∏–º–µ–Ω–∞–º–∏');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (notBefore –∏ notAfter)');
  console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–¥–∞—Ç–µ–ª—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω');
  
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏/–∞–Ω–∞–ª–∏–∑–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${error.message}`);
  process.exit(1);
}
