import React, { useState, useEffect } from 'react';

interface WindowState {
  isFullscreen: boolean;
  isKiosk: boolean;
  isMaximized: boolean;
}

const WindowTestPage: React.FC = () => {
  const [windowState, setWindowState] = useState<WindowState>({
    isFullscreen: false,
    isKiosk: false,
    isMaximized: false,
  });
  const [testLog, setTestLog] = useState<string[]>([]);

  const addToLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setTestLog(prev => [...prev, `[${timestamp}] ${message}`]);
  };

  const checkWindowState = async () => {
    if (!window.electronAPI) {
      addToLog('‚ùå electronAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    try {
      const fullscreen = await window.electronAPI.windowIsFullscreen();
      const kiosk = await window.electronAPI.windowIsKiosk();

      setWindowState({
        isFullscreen: fullscreen,
        isKiosk: kiosk,
        isMaximized: false, // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      });

      addToLog(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞: –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω: ${fullscreen}, –ö–∏–æ—Å–∫: ${kiosk}`);
    } catch (error) {
      addToLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${error}`);
    }
  };

  useEffect(() => {
    checkWindowState();
  }, []);

  const testFunction = async (action: string) => {
    if (!window.electronAPI) {
      addToLog('‚ùå electronAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    try {
      addToLog(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${action}`);

      switch (action) {
        case 'fullscreen': {
          const newFullscreenState = await window.electronAPI.windowToggleFullscreen();
          addToLog(`‚úÖ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${newFullscreenState ? '–í–ö–õ' : '–í–´–ö–õ'}`);
          break;
        }

        case 'kiosk-enter':
          await window.electronAPI.windowEnterKioskMode();
          addToLog('‚úÖ –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∫–∏–æ—Å–∫–∞');
          break;

        case 'kiosk-exit':
          await window.electronAPI.windowExitKioskMode();
          addToLog('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–∏–æ—Å–∫–∞');
          break;

        case 'minimize':
          await window.electronAPI.windowMinimize();
          addToLog('‚úÖ –û–∫–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç–æ');
          break;

        case 'maximize':
          await window.electronAPI.windowMaximize();
          addToLog('‚úÖ –û–∫–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
          break;

        case 'quit':
          addToLog('üö™ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
          await window.electronAPI.appQuit();
          break;

        default:
          addToLog(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
      setTimeout(checkWindowState, 500);
    } catch (error) {
      addToLog(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${action}: ${error}`);
    }
  };

  const clearLog = () => {
    setTestLog([]);
    addToLog('üßπ –õ–æ–≥ –æ—á–∏—â–µ–Ω');
  };

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6 text-center">ü™ü –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º</h1>

      {/* –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      <div className="mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
        <h2 className="text-lg font-semibold mb-3 text-blue-900 dark:text-blue-100">
          üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        </h2>
        <div className="grid grid-cols-2 gap-4">
          <div
            className={`p-3 rounded-lg ${windowState.isFullscreen ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'}`}
          >
            <span className="font-medium">–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º:</span>
            <span className="ml-2">{windowState.isFullscreen ? '‚úÖ –í–ö–õ' : '‚ùå –í–´–ö–õ'}</span>
          </div>
          <div
            className={`p-3 rounded-lg ${windowState.isKiosk ? 'bg-orange-100 text-orange-800' : 'bg-gray-100 text-gray-600'}`}
          >
            <span className="font-medium">–†–µ–∂–∏–º –∫–∏–æ—Å–∫–∞:</span>
            <span className="ml-2">{windowState.isKiosk ? '‚úÖ –í–ö–õ' : '‚ùå –í–´–ö–õ'}</span>
          </div>
        </div>
        <button
          onClick={checkWindowState}
          className="mt-3 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        </button>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="mb-6 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
        <h2 className="text-lg font-semibold mb-3">üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–æ–º</h2>
        <div className="grid grid-cols-3 gap-3">
          <button
            onClick={() => testFunction('fullscreen')}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
          >
            ‚õ∂ –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω
          </button>

          <button
            onClick={() => testFunction('kiosk-enter')}
            className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 transition-colors"
            disabled={windowState.isKiosk}
          >
            üñ•Ô∏è –í–æ–π—Ç–∏ –≤ –∫–∏–æ—Å–∫
          </button>

          <button
            onClick={() => testFunction('kiosk-exit')}
            className="px-4 py-2 bg-orange-600 text-white rounded hover:bg-orange-700 transition-colors"
            disabled={!windowState.isKiosk}
          >
            üö™ –í—ã–π—Ç–∏ –∏–∑ –∫–∏–æ—Å–∫–∞
          </button>

          <button
            onClick={() => testFunction('minimize')}
            className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors"
          >
            üóï –°–≤–µ—Ä–Ω—É—Ç—å
          </button>

          <button
            onClick={() => testFunction('maximize')}
            className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
          >
            üóñ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å
          </button>

          <button
            onClick={() => testFunction('quit')}
            className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
          >
            ‚úï –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          </button>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à–∞—Ö */}
      <div className="mb-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-700">
        <h2 className="text-lg font-semibold mb-3 text-yellow-900 dark:text-yellow-100">
          ‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        </h2>
        <div className="grid grid-cols-2 gap-2 text-sm">
          <div>
            <kbd className="px-2 py-1 bg-gray-200 rounded">F11</kbd> - –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω
          </div>
          <div>
            <kbd className="px-2 py-1 bg-gray-200 rounded">Ctrl+Shift+K</kbd> - –ö–∏–æ—Å–∫
          </div>
          <div>
            <kbd className="px-2 py-1 bg-gray-200 rounded">Ctrl+Q</kbd> - –ó–∞–∫—Ä—ã—Ç—å
          </div>
          <div>
            <kbd className="px-2 py-1 bg-gray-200 rounded">Ctrl+M</kbd> - –°–≤–µ—Ä–Ω—É—Ç—å
          </div>
          <div>
            <kbd className="px-2 py-1 bg-gray-200 rounded">Ctrl+Shift+M</kbd> - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å
          </div>
          <div>
            <kbd className="px-2 py-1 bg-gray-200 rounded">Escape</kbd> - –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞
          </div>
        </div>
      </div>

      {/* –õ–æ–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <div className="p-4 bg-black text-green-400 rounded-lg font-mono text-sm">
        <div className="flex justify-between items-center mb-3">
          <h2 className="text-lg font-semibold">üìù –õ–æ–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
          <button
            onClick={clearLog}
            className="px-3 py-1 bg-red-600 text-white rounded text-xs hover:bg-red-700 transition-colors"
          >
            –û—á–∏—Å—Ç–∏—Ç—å
          </button>
        </div>
        <div className="h-64 overflow-y-auto space-y-1">
          {testLog.length === 0 ? (
            <div className="text-gray-500">–õ–æ–≥ –ø—É—Å—Ç...</div>
          ) : (
            testLog.map((entry, index) => <div key={index}>{entry}</div>)
          )}
        </div>
      </div>

      {/* –í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ */}
      <div className="mt-6 p-4 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-700">
        <h3 className="text-lg font-semibold mb-2 text-red-900 dark:text-red-100">
          ‚ö†Ô∏è –í–∞–∂–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        </h3>
        <ul className="text-sm text-red-800 dark:text-red-200 space-y-1">
          <li>‚Ä¢ –í —Ä–µ–∂–∏–º–µ –∫–∏–æ—Å–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (Alt+F4) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</li>
          <li>‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ</li>
          <li>‚Ä¢ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–æ–ª–∂–Ω—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–∞—Ö</li>
          <li>‚Ä¢ –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–∏–æ—Å–∫–∞ –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–Ω–∏–º–∞—Ç—å—Å—è</li>
        </ul>
      </div>
    </div>
  );
};

export default WindowTestPage;
