# Generate-RSA-Certificates.ps1
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RSA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Cider Code WH App

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
$infoColor = "Cyan"
$errorColor = "Red"
$successColor = "Green"
$warningColor = "Yellow"
$highlightColor = "Magenta"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–∑–ª–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function Invoke-NodeScript {
  param(
    [Parameter(Mandatory = $true)]
    [string]$ScriptPath,
        
    [Parameter(Mandatory = $false)]
    [hashtable]$EnvironmentVars = @{},
        
    [Parameter(Mandatory = $false)]
    [string]$Arguments = ""
  )
    
  try {
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    $currentEnv = @{}
    foreach ($key in $EnvironmentVars.Keys) {
      $currentEnv[$key] = [Environment]::GetEnvironmentVariable($key)
      [Environment]::SetEnvironmentVariable($key, $EnvironmentVars[$key])
    }
        
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
    $command = "node `"$ScriptPath`" $Arguments"
    Write-Host "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: $command" -ForegroundColor $infoColor
    Invoke-Expression $command
    $exitCode = $LASTEXITCODE
        
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    foreach ($key in $EnvironmentVars.Keys) {
      [Environment]::SetEnvironmentVariable($key, $currentEnv[$key])
    }
        
    return $exitCode -eq 0
  }
  catch {
    Write-Host "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: $_" -ForegroundColor $errorColor
    return $false
  }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
function Analyze-Certificate {
  param(
    [Parameter(Mandatory = $true)]
    [string]$CertPath
  )
    
  Write-Host "`nüîç –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: $CertPath" -ForegroundColor $highlightColor
    
  if (-not (Test-Path $CertPath)) {
    Write-Host "‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: $CertPath" -ForegroundColor $errorColor
    return
  }
    
  $result = Invoke-NodeScript -ScriptPath "scripts\analyze-certificate.cjs" -Arguments "`"$CertPath`""
    
  if (-not $result) {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞" -ForegroundColor $errorColor
  }
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –∫–ª—é—á–∞
function Verify-KeyPair {
  param(
    [Parameter(Mandatory = $true)]
    [string]$CertPath,
        
    [Parameter(Mandatory = $true)]
    [string]$KeyPath
  )
    
  Write-Host "`nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –∫–ª—é—á–∞" -ForegroundColor $highlightColor
    
  if (-not (Test-Path $CertPath)) {
    Write-Host "‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: $CertPath" -ForegroundColor $errorColor
    return $false
  }
    
  if (-not (Test-Path $KeyPath)) {
    Write-Host "‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $KeyPath" -ForegroundColor $errorColor
    return $false
  }
    
  $result = Invoke-NodeScript -ScriptPath "scripts\verify-cert-key-pair.cjs" -Arguments "`"$CertPath`" `"$KeyPath`""
    
  return $result
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ certs
$certsDir = Join-Path $PSScriptRoot "certs"
if (-not (Test-Path $certsDir)) {
  New-Item -ItemType Directory -Path $certsDir | Out-Null
  Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: $certsDir" -ForegroundColor $successColor
}

# –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é
function Show-Menu {
  Write-Host "`nüìú –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RSA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –¥–ª—è Cider Code WH App`n" -ForegroundColor $highlightColor
  Write-Host "1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ RSA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
  Write-Host "2. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ RSA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
  Write-Host "3. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
  Write-Host "4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –∫–ª—é—á–∞"
  Write-Host "5. –í—ã–π—Ç–∏`n"
    
  $choice = Read-Host "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5)"
  return $choice
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–µ–Ω—é
$exit = $false

while (-not $exit) {
  $choice = Show-Menu
    
  switch ($choice) {
    "1" {
      Write-Host "`nüîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è RSA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" -ForegroundColor $highlightColor
            
      $domain = Read-Host "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: localhost)"
      if (-not $domain) { $domain = "localhost" }
            
      $company = Read-Host "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Cider Code)"
      if (-not $company) { $company = "Cider Code" }
            
      $keyBits = Read-Host "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–ª—é—á–∞ RSA (2048, 3072, 4096) (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2048)"
      if (-not $keyBits) { $keyBits = "2048" }
            
      $envVars = @{
        "DOMAIN_NAME"  = $domain
        "COMPANY_NAME" = $company
        "CERT_TYPE"    = "development"
        "KEY_BITS"     = $keyBits
      }
            
      $result = Invoke-NodeScript -ScriptPath "scripts\generate-rsa-certs.cjs" -EnvironmentVars $envVars
            
      if ($result) {
        Write-Host "`n‚úÖ RSA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!" -ForegroundColor $successColor
      }
      else {
        Write-Host "`n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤" -ForegroundColor $errorColor
      }
            
      Write-Host "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -ForegroundColor $infoColor
      [void][System.Console]::ReadKey($true)
    }
    "2" {
      Write-Host "`nüîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è RSA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞" -ForegroundColor $highlightColor
            
      $domain = Read-Host "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
      if (-not $domain) {
        Write-Host "‚ùå –î–æ–º–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤" -ForegroundColor $errorColor
        continue
      }
            
      $company = Read-Host "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Cider Code)"
      if (-not $company) { $company = "Cider Code" }
            
      $keyBits = Read-Host "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–ª—é—á–∞ RSA (2048, 3072, 4096) (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2048)"
      if (-not $keyBits) { $keyBits = "2048" }
            
      $envVars = @{
        "DOMAIN_NAME"  = $domain
        "COMPANY_NAME" = $company
        "CERT_TYPE"    = "production"
        "KEY_BITS"     = $keyBits
      }
            
      $result = Invoke-NodeScript -ScriptPath "scripts\generate-rsa-certs.cjs" -EnvironmentVars $envVars
            
      if ($result) {
        Write-Host "`n‚úÖ RSA-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!" -ForegroundColor $successColor
        Write-Host "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–≤." -ForegroundColor $warningColor
        Write-Host "   –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Let's Encrypt –∏–ª–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏." -ForegroundColor $warningColor
      }
      else {
        Write-Host "`n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤" -ForegroundColor $errorColor
      }
            
      Write-Host "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -ForegroundColor $infoColor
      [void][System.Console]::ReadKey($true)
    }
    "3" {
      Write-Host "`nüîç –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞" -ForegroundColor $highlightColor
            
      $defaultPath = Join-Path $certsDir "cert.pem"
      $certPath = Read-Host "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $defaultPath)"
            
      if (-not $certPath) { $certPath = $defaultPath }
            
      Analyze-Certificate -CertPath $certPath
            
      Write-Host "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -ForegroundColor $infoColor
      [void][System.Console]::ReadKey($true)
    }
    "4" {
      Write-Host "`nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –∫–ª—é—á–∞" -ForegroundColor $highlightColor
            
      $defaultCertPath = Join-Path $certsDir "cert.pem"
      $defaultKeyPath = Join-Path $certsDir "key.pem"
            
      $certPath = Read-Host "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $defaultCertPath)"
      if (-not $certPath) { $certPath = $defaultCertPath }
            
      $keyPath = Read-Host "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∫–ª—é—á—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $defaultKeyPath)"
      if (-not $keyPath) { $keyPath = $defaultKeyPath }
            
      $result = Verify-KeyPair -CertPath $certPath -KeyPath $keyPath
            
      if ($result) {
        Write-Host "`n‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É" -ForegroundColor $successColor
      }
      else {
        Write-Host "`n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É" -ForegroundColor $warningColor
      }
            
      Write-Host "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -ForegroundColor $infoColor
      [void][System.Console]::ReadKey($true)
    }
    "5" {
      $exit = $true
    }
    default {
      Write-Host "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5." -ForegroundColor $errorColor
      Start-Sleep -Seconds 2
    }
  }
}
